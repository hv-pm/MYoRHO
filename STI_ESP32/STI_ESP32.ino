//-----------------------------------------------------------------------------CABEÇALHO-----------------------------------------------------------------------------
// Autor: Hygor Vinícius Pereira Martins (2022)
//        ESP32_STI ()
//
// Arduino IDE v1.8.1
//
// Bibliotecas utilizadas:
//                        BLEDevice (https://github.com/espressif/arduino-esp32/blob/master/libraries/BLE/src/BLEDevice.h)
//                        BLEUtils (https://github.com/espressif/arduino-esp32/blob/master/libraries/BLE/src/BLEUtils.h)
//                        BLEServer (https://github.com/espressif/arduino-esp32/blob/master/libraries/BLE/src/BLEServer.h)
// Código auxiliar:
//                 Look-up table (https://github.com/e-tinkers/esp32-adc-calibrate/blob/master/examples/esp32_adc_lut_example.ino)
//
// Adaptado de:
//             BLE server (https://github.com/nkolban/esp32-snippets/blob/master/cpp_utils/tests/BLETests/SampleServer.cpp)

//----------------------------------------------------------------------------BIBLIOTECAS----------------------------------------------------------------------------
#include <BLEDevice.h> // Permite uso dos comandos do bluetooth de baixa energia da plataforma ESP32.
#include <BLEUtils.h> // Utilitários para envio dos dados por BLE em diversos formatos.
#include <BLEServer.h> // Habilita as operações envolvendo o servidor BLE criado no ESP32.

//------------------------------------------------------------------------------FILTROS------------------------------------------------------------------------------
//--------------------------------BUTTERWORTH-------------------------------
// Filtro passa-banda (passa-alta + passa-baixa) de 4ª ordem para a faixa de frequência 20 à 200 Hz. é implmentada no ESP32 utilizando a transposta da forma direta II da equação:
//    a(1)*y(n) = b(1)*x(n) + b(2)*x(n-1) + ... + b(nb+1)*x( ) - a(2)*y(n-1) - ... a(na+1)*y(n-na)
// onde,
// a = vetor descritor do tipo de filtro (denominador);
// b = vetor descritor do tipo de filtro (numerador);
// x = vetor de amostra a ser filtrado;
// y = vetor da amostra filtrada;
// n = índice da amostra dentro da janela de SMEs.
// Os vetores descritores do filtro tem tamanho de N+1, onde N é o número da ordem do filtro, i.e. para um filtro 4ª ordem, N = 4.

// A transposta da forma direta II implementada no ESP32 é:
//------------Passa-alta------------
//    Ya = Ba(1)*x(t) + Ba(2)*x(t-1) + Ba(3)*x(t-2) + Ba(4)*x(t-3) + Ba(5)*x(t-4) - Aa(2)*Ya(t-1) - Aa(3)*Ya(n-2) - Aa(4)*Ya(n-3) - Aa(5)*Ya(n-4)
// onde,
// Aa = vetor descritor do filtro passa-alta (denominador);
// Ba = vetor descritor do filtro passa-alta (numerador);
// x = vetor de amostra a ser filtrado no passa-alta;
// Ya = vetor da amostra filtrada no passa-alta;
// t = índice da amostra dentro da janela de SMEs;
// n = índice da amostra dentro da janela de SMEs filtrados pelo passa-alta.

//------------Passa-baixa------------
//    Yb = Bb(1)*Ya(n) + Bb(2)*Ya(n-1) + Bb(3)*Ya(n-2) + Bb(4)*Ya(n-3) + Bb(5)*Ya(n-4) - Ab(2)*Yb(n-1) - Ab(3)*Yb(n-2) - Ab(4)*Yb(n-3) - Ab(5)*Yb(n-4)
// onde,
// Ab = vetor descritor do filtro passa-baixa (denominador);
// Bb = vetor descritor do filtro passa-baixa (numerador);
// Ya = vetor de amostra filtrada no passa-alta a ser filtrado no passa-baixa;
// Yb = vetor da amostra filtrada no passa-alta e depois no passa-baixa (passa-banda);
// t = índice da amostra dentro da janela de SMEs filtrados pelo passa-alta;
// n = índice da amostra dentro da janela de SMEs filtrados pelo passa-baixa.

// Utilizar o arquivo "filter_num_den_gen.m" para gerar os vetores descritivos Butterworth de 4ª ordem:
//  - Numeradores Ba, Bb (butterworth);
//  - Denominadores Aa, Ab (butterworth).
//------>Passa-alta[Aa,Ba] Passa-baixa[Ab,Bb]
const double Aa[5] = {1, -3.671729089161938, 5.067998386734198, -3.115966925201753, 0.719910327291874};
const double Ba[5] = {0.848475295524360, -3.393901182097441, 5.090851773146162, -3.393901182097441, 0.848475295524360};
const double Ab[5] = {1, -0.782095198023338, 0.679978526916299, -0.182675697753032, 0.030118875043169};
const double Bb[5] = {0.046582906636444, 0.186331626545775, 0.279497439818662, 0.186331626545775, 0.046582906636444};

//--------------------------VARIÁVEIS BUTTERWORTH--------------------------
double x[80]; // Janela de 80 ms dos SMEs lidos pelo MyoWare, cada amostra é coletada à 1 kHz.
double x_t1; // x(n-1).
double x_t2; // x(n-2).
double x_t3; // x(n-3).
double x_t4; // x(n-4).
double Ya[5]; // Janela móvel para filtrar x com filtro Butterworth 4ª ordem (passa-alta).
double Yb[5]; // Janela móvel para filtrar Ya com filtro Butterworth 4ª ordem (passa-baixa).
int t = 0; // Índice da janela de SMEs lidos pelo MyoWare.

//------------------------VARIÁVEIS DE CONTINUIDADE------------------------
// Como os filtros utilizados são recursivos, eles utilizam valores de saída anteriores.
// Estas variáveis guardam os últimos valores da janela anterior para serem usados na nova janela.
// Quando o STI inicia, não há amostras. Assim, a extração de características e classificação da primeira janela de 80 ms será errônea.
// Na segunda filtragem já ocorre a estabilização. Isso não afeta o STI de qualquer forma, pois o SRA é programado para se conectar ao SRI depois de alguns segundos.
double x_ant; // x(n) da janela anterior.
double x_t1_ant; // x(n-1) da janela anterior.
double x_t2_ant; // x(n-2) da janela anterior.
double x_t3_ant; // x(n-3) da janela anterior.
double Ya_ant; // Ya(n) da janela filtrada anterior.
double Ya_n1_ant; // Ya(n-1) da janela filtrada anterior.
double Ya_n2_ant; // Ya(n-2) da janela filtrada anterior.
double Ya_n3_ant; // Ya(n-3) da janela filtrada anterior.
double Yb_ant; // Yb(n) da janela filtrada anterior.
double Yb_n1_ant; // Yb(n-1) da janela filtrada anterior.
double Yb_n2_ant; // Yb(n-2) da janela filtrada anterior.
double Yb_n3_ant; // Yb(n-3) da janela filtrada anterior.
bool bn_ant = false; // Variável auxiliar no translado dos dados da janela filtrada anterior para a atual. Ativa (true) ou desativa (false) o método de deslocamento da janela dos filtros.
int bn_cont = 0; // Variável auxiliar no translado dos dados da janela filtrada anterior para a atual. Conta quantas vezes a janela de dados filtrados deslocou em uma unidade os dados filtrados anteriores na janela de filtro atual.

//----------------------------------NOTCH----------------------------------
// Filtro Notch para a frequência de rede (60 Hz). Também é implmentada no ESP32 utilizando a transposta da forma direta II:
//    Yn = Bn(1)*Yb(n) + Bn(2)*Yb(n-1) + Bn(3)*Yb(n-2) - An(2)*Yc(n-1) - An(3)*Yc(n-2)
// onde,
// Ab = vetor descritor do filtro Notch (denominador);
// Bb = vetor descritor do filtro Notch (numerador);
// Yb = vetor de amostra filtrada no passa-banda a ser filtrado no Notch;
// Yc = vetor da amostra filtrada no passa-banda e no Notch (60 Hz);
// n = índice da amostra dentro da janela de SMEs.

//Utilizar o arquivo "filter_num_den_gen.m" (github) para gerar os vetores:
//  - Numeradores Bn (notch);
//  - Denominadores An (notch).
//------>[An,Bn]
const double An[3] = {1, -1.856054387535818, 0.996237177113225};
const double Bn[3] = {0.998118588556613, -1.856054387535818, 0.998118588556613};

//-----------------------------VARIÁVEIS NOTCH-----------------------------
double Yc[80]; // Guarda os SMEs filtrados pelo Notch.
double Yc_n1; // Yc(n-1).
double Yc_n2; // Yc(n-2).
int n = 0; // Índice da janela de SMEs filtrados.

//------------------------VARIÁVEIS DE CONTINUIDADE------------------------
int flag_reset = 0; // Durante a filtragem pelo filtro Notch na janela de 80 ms, o vetor Yc rebece um reset no índice n após um determinado valor, isso é necessário para simplificar o processo de filtragem.
// flag_reset = 0 -> Não há necessidade de resetar o índice do vetor Yc ainda, continue usando os recursos dos índices anteriores. Possui algumas condições para STI caso seja a primeira vez rodando o filtro após o início.
// flag_reset = 1 -> Houve o reset do índice n, ativa rotina para utilizar os dados do fim do vetor como recursos de entrada no filtro.
// flag_reset = 2 -> Continua o processo da rotina de flag = 1, faz o intermédio entre o outro recurso do fim do vetor e dá continuidade no índice do vetor atual.
double Yc_n1_reset; // Guarda os recursos de Yc[n-1] antes de resetar o índice, i.e., Yc[4].
double Yc_n2_reset; // Guarda os recursos de Yc[n-2] antes de resetar o índice, i.e., Yc[3].
double Yc_ant; // Yc[n] da janela filtrada anterior.
double Yc_n1_ant; // Yb[n-1] da janela filtrada anterior.

//------------------------------------------------------------------VARIÁVEIS PARA AS CARACTERÍSTICAS-----------------------------------------------------------------
// Este espaço pode ser usado para criar as variáveis das características que serão implementadas para seu projeto.
// Neste programa, dois contadores criados para realizar a soma das amostras. Esses somatórios são utilizados nas equações de extração das características posteriormente.
double rms_sum = 0;
double dasdv_sum = 0;
double dasdv_aux = 0;

//---------------------------------------------------------------------------PARÂMETROS LDA---------------------------------------------------------------------------
// Quando o número de amostras usadas no treinamento do LDA para cada classe é o mesmo, a probabilidade a priori é redundante e é descartada da equação de predição.
// Dessa forma, apenas a fórmula da distância Mahalanobis é utilizada para discriminar uma amostra desconhecida x.
// A distância Mahalanobis é adistância entre x e o centro de cada classe. O centro da classe mais próximo de x tem a maior chance de x pertencer à tal classe.
// Como o LDA foi treinado com o mesmo número de amostras para cada classe, será implementada apenas a distância Mahalanobis para discriminação das características extraídas dos SMEs em tempo real.
// A equação de Mahalanobis irá gerar uma matriz (Dis_Mah) 3x3, e a distância das características extraídas até o centro das classes serão representadas na diagonal principal.
//    Dis_Mah = (x - m) * S^-1 * (x - m)'
// onde,
// x = vetor de características que é extraído após a filtragem dos SMEs;
// m = matriz de média das classes;
// S = matriz de covariancia entre classes;
// Dis_Mah[1][1] = distância Mahalanobis do vetor de características processados em tempo real até o centro da classe MR (Mão em Repouso);
// Dis_Mah[2][2] = distância Mahalanobis do vetor de características processados em tempo real até o centro da classe PP (Preensão Pinça);
// Dis_Mah[3][3] = distância Mahalanobis do vetor de características processados em tempo real até o centro da classe PC (Preensão Cilíndrica);
// o vetor y irá guardar apenas as distâncias e a matriz será descartada.
// y = [LDA[1][1], LDA[2][2], LDA[3][3]];

double x_carac[1][2]; // Guarda as duas características no vetor a ser discriminado.
double x_m_Sinv[3][3]; // Guarda a parte "(x - m) * S^-1" da equação Mahalanobis.
double y[1][3]; // Guarda as distâncias Mahalanobis para as classes MR, PP e PC.

//Utilizar o arquivo ".m" (github) para gerar as matrizes:
//  - De média das classes (Mdl.Mu);
//  - De covariancia entre classes (Mdl.Sigma).
double m[3][2] = {
  {0.0422393511058094,  0.0267576253325455},
  {0.143745116387683, 0.0812458071679230},
  {0.228088290837087, 0.122776872573675}
};

double Sinv[2][2] = {
  {6.416741256726920e+04, -1.148893014853887e+05},
  {-1.148893014853887e+05, 2.090185861335545e+05}
};

//---------------------------------------------------------------------------LOOK-UP TABLE---------------------------------------------------------------------------
// A LUT é gerada a partir do exemplo "esp32_adc_lut_example" disponível no header deste código.
const float ADC_LUT[4096] = { 0,
                              72.4000, 80.8000, 81.8000, 82.8000, 84.0000, 85.0000, 86.0000, 87.0000, 88.0000, 89.2000, 90.2000, 91.4000, 92.6000, 93.6000, 94.8000,
                              95.8000, 96.8000, 97.8000, 98.8000, 99.8000, 100.8000, 101.8000, 102.8000, 103.8000, 104.8000, 105.8000, 107.0000, 108.0000, 109.0000, 110.0000,
                              111.0000, 112.0000, 113.0000, 114.0000, 115.0000, 116.0000, 117.0000, 118.0000, 119.0000, 120.0000, 121.0000, 122.0000, 123.0000, 124.0000, 125.0000,
                              126.0000, 127.0000, 128.0000, 129.0000, 130.0000, 131.0000, 132.0000, 133.0000, 134.0000, 135.0000, 136.0000, 137.0000, 138.0000, 139.0000, 140.0000,
                              141.0000, 142.0000, 143.0000, 144.0000, 145.2000, 146.8000, 148.0000, 149.8000, 151.0000, 152.6000, 154.0000, 155.4000, 156.8000, 158.0000, 159.8000,
                              161.0000, 162.2000, 163.8000, 164.8000, 166.0000, 167.6000, 168.8000, 170.0000, 171.2000, 172.8000, 173.8000, 175.0000, 176.4000, 177.4000, 178.4000,
                              179.2000, 180.2000, 181.2000, 182.2000, 183.0000, 184.0000, 185.0000, 186.0000, 187.0000, 188.0000, 189.0000, 190.0000, 191.0000, 192.0000, 193.0000,
                              194.6000, 195.8000, 197.0000, 198.2000, 199.8000, 200.8000, 202.0000, 203.4000, 204.8000, 206.0000, 207.0000, 208.6000, 209.6000, 210.6000, 211.6000,
                              212.8000, 213.8000, 214.8000, 215.8000, 216.8000, 217.8000, 218.8000, 219.8000, 220.8000, 221.8000, 222.8000, 223.8000, 225.0000, 226.0000, 227.2000,
                              228.6000, 229.8000, 230.8000, 232.0000, 233.0000, 234.4000, 235.6000, 236.8000, 237.8000, 239.0000, 240.0000, 241.8000, 242.8000, 244.0000, 245.6000,
                              246.8000, 248.0000, 249.6000, 250.8000, 252.0000, 253.6000, 254.8000, 256.0000, 257.0000, 258.0000, 259.2000, 260.2000, 261.2000, 262.2000, 263.2000,
                              264.4000, 265.4000, 266.4000, 267.4000, 268.4000, 269.6000, 270.6000, 271.6000, 272.8000, 273.8000, 275.0000, 276.0000, 277.4000, 278.8000, 279.8000,
                              281.0000, 282.2000, 283.6000, 284.8000, 286.0000, 287.0000, 288.4000, 289.6000, 290.6000, 291.8000, 292.8000, 293.8000, 294.8000, 296.0000, 297.0000,
                              298.0000, 299.0000, 300.2000, 301.4000, 302.4000, 303.6000, 304.8000, 306.0000, 307.0000, 308.4000, 309.8000, 311.0000, 312.0000, 313.4000, 314.8000,
                              315.8000, 317.0000, 318.4000, 319.8000, 320.8000, 321.8000, 322.8000, 323.8000, 324.8000, 325.8000, 326.8000, 327.8000, 328.8000, 329.8000, 330.8000,
                              331.8000, 333.0000, 334.0000, 335.0000, 336.0000, 337.0000, 338.2000, 339.6000, 340.8000, 341.8000, 343.0000, 344.0000, 345.4000, 346.8000, 347.8000,
                              349.0000, 350.0000, 351.2000, 352.4000, 353.6000, 354.6000, 355.6000, 356.6000, 357.6000, 358.6000, 359.8000, 360.8000, 361.8000, 362.8000, 363.8000,
                              364.8000, 365.8000, 366.8000, 367.8000, 368.8000, 370.0000, 371.0000, 372.4000, 373.8000, 374.8000, 376.0000, 377.2000, 378.6000, 379.8000, 381.0000,
                              382.0000, 383.2000, 384.6000, 385.6000, 386.6000, 387.6000, 388.6000, 389.6000, 390.6000, 391.6000, 392.6000, 393.6000, 394.6000, 395.6000, 396.6000,
                              397.6000, 398.6000, 399.6000, 400.6000, 401.6000, 402.6000, 403.8000, 404.8000, 405.8000, 406.8000, 407.8000, 408.8000, 409.8000, 410.8000, 411.8000,
                              412.8000, 413.8000, 414.8000, 415.8000, 416.8000, 417.8000, 418.8000, 419.8000, 420.8000, 421.8000, 422.8000, 423.8000, 424.8000, 425.8000, 426.8000,
                              427.8000, 428.8000, 429.8000, 430.8000, 431.8000, 432.8000, 433.8000, 434.8000, 436.0000, 437.0000, 438.0000, 439.0000, 440.0000, 441.2000, 442.4000,
                              443.4000, 444.6000, 445.8000, 446.8000, 447.8000, 449.0000, 450.0000, 451.8000, 452.8000, 454.0000, 455.6000, 456.8000, 458.0000, 459.6000, 460.8000,
                              462.0000, 463.6000, 464.8000, 465.8000, 466.8000, 467.8000, 468.8000, 469.8000, 470.8000, 471.8000, 472.8000, 473.8000, 474.8000, 475.8000, 476.8000,
                              477.8000, 478.8000, 479.8000, 480.8000, 482.0000, 483.0000, 484.4000, 485.8000, 486.8000, 488.0000, 489.0000, 490.4000, 491.8000, 492.8000, 494.0000,
                              495.0000, 496.4000, 497.6000, 498.8000, 499.8000, 500.8000, 502.0000, 503.0000, 504.0000, 505.2000, 506.4000, 507.6000, 508.8000, 509.8000, 510.8000,
                              512.0000, 513.0000, 514.4000, 515.8000, 517.0000, 518.0000, 519.4000, 520.8000, 522.0000, 523.0000, 524.6000, 525.8000, 527.0000, 528.2000, 529.0000,
                              530.0000, 531.0000, 532.0000, 533.0000, 534.0000, 535.0000, 536.0000, 537.0000, 538.0000, 539.0000, 540.0000, 541.0000, 542.0000, 543.0000, 544.0000,
                              545.2000, 546.6000, 547.8000, 549.0000, 550.0000, 551.2000, 552.8000, 553.8000, 555.0000, 556.0000, 557.4000, 558.8000, 559.8000, 560.8000, 562.0000,
                              563.0000, 564.0000, 565.0000, 566.0000, 567.0000, 568.0000, 569.0000, 570.0000, 571.0000, 572.0000, 573.0000, 574.0000, 575.0000, 576.0000, 577.0000,
                              578.0000, 579.0000, 580.2000, 581.2000, 582.2000, 583.4000, 584.4000, 585.6000, 586.6000, 587.6000, 588.8000, 589.8000, 590.8000, 591.8000, 592.8000,
                              593.8000, 594.8000, 595.8000, 596.8000, 597.8000, 598.8000, 599.8000, 600.8000, 601.8000, 602.8000, 603.8000, 604.8000, 605.8000, 606.8000, 607.8000,
                              608.8000, 610.0000, 611.0000, 612.0000, 613.0000, 614.0000, 615.0000, 616.0000, 617.0000, 618.0000, 619.0000, 620.0000, 621.0000, 622.0000, 623.0000,
                              624.2000, 625.8000, 627.0000, 628.6000, 629.8000, 631.0000, 632.8000, 634.0000, 635.4000, 636.8000, 638.0000, 639.8000, 640.8000, 641.4000, 642.0000,
                              643.0000, 643.8000, 644.4000, 645.0000, 646.0000, 646.8000, 647.6000, 648.0000, 649.0000, 649.8000, 650.6000, 651.2000, 652.0000, 652.8000, 653.6000,
                              654.2000, 655.0000, 655.8000, 656.8000, 657.8000, 658.8000, 660.0000, 661.0000, 662.0000, 663.0000, 664.0000, 665.0000, 666.2000, 667.2000, 668.4000,
                              669.6000, 670.6000, 671.8000, 672.8000, 673.8000, 674.8000, 675.8000, 676.8000, 677.8000, 678.8000, 679.8000, 680.8000, 681.8000, 682.8000, 683.8000,
                              684.8000, 685.8000, 686.8000, 687.8000, 688.8000, 690.0000, 691.0000, 692.0000, 693.4000, 694.6000, 695.8000, 696.8000, 698.0000, 699.0000, 700.0000,
                              701.4000, 702.6000, 703.8000, 704.8000, 706.0000, 707.0000, 708.4000, 709.8000, 710.8000, 712.0000, 713.0000, 714.4000, 715.8000, 716.8000, 718.0000,
                              719.0000, 720.4000, 721.8000, 722.8000, 724.0000, 725.2000, 726.6000, 727.8000, 728.8000, 730.0000, 731.2000, 732.6000, 733.8000, 735.0000, 736.0000,
                              737.0000, 738.0000, 739.0000, 740.0000, 741.0000, 742.0000, 743.0000, 744.0000, 745.0000, 746.0000, 747.0000, 748.0000, 749.0000, 750.0000, 750.8000,
                              751.8000, 753.6000, 755.6000, 757.4000, 759.4000, 761.2000, 763.2000, 765.2000, 767.0000, 768.8000, 769.8000, 770.8000, 771.8000, 772.8000, 773.8000,
                              774.8000, 775.8000, 776.8000, 777.8000, 778.8000, 779.8000, 780.8000, 781.8000, 782.8000, 783.8000, 784.8000, 785.8000, 786.8000, 788.0000, 789.0000,
                              790.0000, 791.0000, 792.2000, 793.2000, 794.4000, 795.6000, 796.8000, 797.8000, 798.8000, 799.8000, 801.0000, 802.0000, 803.2000, 804.6000, 805.8000,
                              806.8000, 808.0000, 809.0000, 810.4000, 811.8000, 812.8000, 814.0000, 815.0000, 816.2000, 817.2000, 818.0000, 819.0000, 820.0000, 821.0000, 822.0000,
                              823.0000, 824.0000, 825.0000, 826.0000, 827.0000, 827.8000, 828.8000, 829.8000, 830.8000, 831.8000, 832.8000, 834.0000, 835.6000, 836.8000, 838.0000,
                              839.2000, 840.8000, 841.8000, 843.0000, 844.6000, 845.8000, 847.0000, 848.2000, 849.4000, 850.4000, 851.6000, 852.6000, 853.8000, 854.8000, 855.8000,
                              856.8000, 857.8000, 859.0000, 860.0000, 861.0000, 862.0000, 863.0000, 864.2000, 865.6000, 866.8000, 868.0000, 869.0000, 870.2000, 871.6000, 872.8000,
                              874.0000, 875.0000, 876.4000, 877.8000, 878.8000, 880.0000, 881.0000, 882.0000, 883.0000, 884.0000, 885.0000, 886.0000, 887.0000, 888.0000, 889.0000,
                              890.0000, 891.0000, 892.0000, 893.0000, 894.0000, 895.0000, 896.0000, 897.0000, 898.2000, 899.8000, 900.8000, 902.0000, 903.2000, 904.6000, 905.8000,
                              907.0000, 908.0000, 909.6000, 910.8000, 912.0000, 913.0000, 913.8000, 914.8000, 915.8000, 916.8000, 917.8000, 918.8000, 919.8000, 920.6000, 921.6000,
                              922.4000, 923.4000, 924.2000, 925.2000, 926.0000, 927.0000, 928.0000, 929.2000, 930.6000, 931.8000, 933.0000, 934.0000, 935.2000, 936.6000, 937.8000,
                              939.0000, 940.0000, 941.4000, 942.8000, 943.8000, 944.8000, 945.8000, 946.8000, 947.8000, 948.8000, 949.8000, 950.8000, 951.8000, 952.8000, 953.8000,
                              954.8000, 955.8000, 956.8000, 957.8000, 958.8000, 959.8000, 960.8000, 961.8000, 962.8000, 964.0000, 965.0000, 966.0000, 967.0000, 968.0000, 969.0000,
                              970.2000, 971.2000, 972.4000, 973.6000, 974.6000, 975.8000, 976.8000, 977.8000, 978.8000, 979.8000, 980.8000, 981.8000, 982.8000, 983.8000, 984.8000,
                              985.8000, 986.8000, 987.8000, 988.8000, 989.8000, 990.8000, 991.8000, 992.8000, 993.8000, 994.8000, 995.8000, 996.8000, 997.8000, 998.8000, 999.8000,
                              1000.8000, 1001.8000, 1002.8000, 1003.8000, 1004.8000, 1005.8000, 1006.8000, 1007.8000, 1009.0000, 1010.8000, 1012.0000, 1013.6000, 1015.0000, 1016.6000, 1018.0000,
                              1019.4000, 1021.0000, 1022.4000, 1023.8000, 1025.0000, 1026.0000, 1026.8000, 1027.8000, 1028.8000, 1029.8000, 1030.8000, 1031.8000, 1032.8000, 1033.8000, 1034.8000,
                              1035.8000, 1036.8000, 1037.8000, 1038.8000, 1039.8000, 1040.8000, 1041.8000, 1043.0000, 1044.0000, 1045.2000, 1046.6000, 1047.8000, 1048.8000, 1050.0000, 1051.0000,
                              1052.2000, 1053.6000, 1054.8000, 1055.8000, 1057.0000, 1058.0000, 1059.0000, 1060.0000, 1061.0000, 1062.0000, 1063.0000, 1064.0000, 1065.0000, 1066.0000, 1067.0000,
                              1068.0000, 1069.0000, 1070.0000, 1071.2000, 1072.2000, 1073.6000, 1074.8000, 1076.0000, 1077.0000, 1078.6000, 1079.8000, 1081.0000, 1082.0000, 1083.4000, 1084.8000,
                              1085.8000, 1087.0000, 1088.2000, 1089.0000, 1090.0000, 1091.0000, 1092.0000, 1093.0000, 1094.0000, 1095.0000, 1096.0000, 1097.0000, 1098.0000, 1098.8000, 1099.8000,
                              1100.8000, 1101.8000, 1102.8000, 1103.8000, 1104.8000, 1106.0000, 1107.0000, 1108.4000, 1109.8000, 1110.8000, 1112.0000, 1113.2000, 1114.6000, 1115.8000, 1117.0000,
                              1118.0000, 1119.2000, 1120.6000, 1121.6000, 1122.6000, 1123.4000, 1124.4000, 1125.4000, 1126.4000, 1127.4000, 1128.4000, 1129.4000, 1130.2000, 1131.2000, 1132.2000,
                              1133.2000, 1134.2000, 1135.2000, 1136.2000, 1137.6000, 1138.8000, 1139.8000, 1141.0000, 1142.2000, 1143.6000, 1144.8000, 1146.0000, 1147.0000, 1148.4000, 1149.8000,
                              1150.8000, 1152.0000, 1153.0000, 1154.0000, 1155.0000, 1156.0000, 1157.0000, 1157.8000, 1158.8000, 1159.8000, 1160.8000, 1161.8000, 1162.8000, 1163.8000, 1164.8000,
                              1165.8000, 1166.8000, 1167.8000, 1168.8000, 1169.8000, 1170.8000, 1171.8000, 1173.0000, 1174.0000, 1175.0000, 1176.0000, 1177.0000, 1178.2000, 1179.4000, 1180.6000,
                              1181.8000, 1182.8000, 1183.8000, 1184.8000, 1185.6000, 1186.2000, 1187.0000, 1188.0000, 1188.8000, 1189.8000, 1190.6000, 1191.4000, 1192.0000, 1193.0000, 1194.0000,
                              1194.8000, 1195.8000, 1196.4000, 1197.2000, 1198.0000, 1199.0000, 1199.8000, 1200.8000, 1201.8000, 1203.0000, 1204.0000, 1205.0000, 1206.2000, 1207.4000, 1208.6000,
                              1209.8000, 1210.8000, 1211.8000, 1213.0000, 1214.0000, 1215.0000, 1216.0000, 1217.0000, 1218.0000, 1219.0000, 1220.0000, 1221.0000, 1222.0000, 1222.8000, 1223.8000,
                              1224.8000, 1225.8000, 1226.8000, 1227.8000, 1228.8000, 1229.8000, 1230.6000, 1231.6000, 1232.6000, 1233.8000, 1234.8000, 1236.0000, 1237.0000, 1238.0000, 1239.4000,
                              1240.6000, 1241.8000, 1242.8000, 1244.0000, 1245.0000, 1246.2000, 1247.4000, 1248.6000, 1249.6000, 1250.6000, 1251.6000, 1252.8000, 1253.8000, 1254.8000, 1255.8000,
                              1256.8000, 1257.8000, 1258.8000, 1259.8000, 1260.8000, 1261.8000, 1262.8000, 1263.8000, 1265.0000, 1266.8000, 1268.8000, 1270.4000, 1272.2000, 1274.0000, 1276.0000,
                              1277.8000, 1279.8000, 1281.0000, 1282.0000, 1283.2000, 1284.6000, 1285.8000, 1286.8000, 1288.0000, 1289.0000, 1290.4000, 1291.8000, 1292.8000, 1294.0000, 1295.0000,
                              1296.2000, 1297.0000, 1298.0000, 1299.0000, 1300.0000, 1300.8000, 1301.8000, 1302.8000, 1303.8000, 1304.8000, 1305.6000, 1306.4000, 1307.4000, 1308.2000, 1309.0000,
                              1310.0000, 1311.0000, 1312.0000, 1313.0000, 1314.4000, 1315.8000, 1316.8000, 1318.0000, 1319.2000, 1320.6000, 1321.8000, 1323.0000, 1324.0000, 1325.4000, 1326.8000,
                              1327.8000, 1328.8000, 1329.8000, 1330.8000, 1331.8000, 1332.8000, 1333.8000, 1334.8000, 1335.8000, 1336.8000, 1337.8000, 1338.8000, 1339.8000, 1340.8000, 1341.8000,
                              1342.8000, 1343.8000, 1344.8000, 1346.0000, 1347.2000, 1348.6000, 1349.8000, 1350.8000, 1352.0000, 1353.2000, 1354.6000, 1355.8000, 1356.8000, 1358.0000, 1359.2000,
                              1360.4000, 1361.4000, 1362.4000, 1363.2000, 1364.2000, 1365.2000, 1366.2000, 1367.2000, 1368.0000, 1369.0000, 1370.0000, 1371.0000, 1372.0000, 1373.0000, 1374.0000,
                              1375.0000, 1376.0000, 1377.0000, 1378.2000, 1379.4000, 1380.6000, 1381.8000, 1382.8000, 1383.8000, 1385.0000, 1386.0000, 1387.0000, 1388.4000, 1389.6000, 1390.8000,
                              1391.8000, 1392.8000, 1393.8000, 1395.0000, 1396.0000, 1397.0000, 1398.0000, 1399.0000, 1400.0000, 1401.2000, 1402.4000, 1403.4000, 1404.6000, 1405.8000, 1406.8000,
                              1407.8000, 1408.8000, 1409.8000, 1410.8000, 1411.8000, 1412.8000, 1413.8000, 1414.8000, 1415.8000, 1416.8000, 1417.8000, 1418.8000, 1419.8000, 1420.8000, 1421.8000,
                              1422.8000, 1423.8000, 1425.0000, 1426.0000, 1427.0000, 1428.0000, 1429.2000, 1430.4000, 1431.6000, 1432.8000, 1433.8000, 1434.8000, 1435.8000, 1437.0000, 1438.0000,
                              1439.0000, 1440.0000, 1441.0000, 1442.0000, 1443.0000, 1444.0000, 1445.0000, 1446.0000, 1447.0000, 1448.0000, 1449.0000, 1450.0000, 1451.0000, 1452.0000, 1453.0000,
                              1454.0000, 1454.8000, 1455.8000, 1457.0000, 1458.0000, 1459.0000, 1460.2000, 1461.4000, 1462.8000, 1463.8000, 1464.8000, 1466.0000, 1467.0000, 1468.0000, 1469.2000,
                              1470.4000, 1471.8000, 1472.8000, 1473.8000, 1474.8000, 1475.8000, 1476.8000, 1477.8000, 1478.8000, 1479.8000, 1480.8000, 1481.8000, 1482.8000, 1483.8000, 1485.0000,
                              1486.0000, 1487.0000, 1488.0000, 1489.0000, 1490.4000, 1491.8000, 1492.8000, 1494.0000, 1495.4000, 1496.8000, 1497.8000, 1499.0000, 1500.2000, 1501.8000, 1502.8000,
                              1504.0000, 1505.0000, 1506.0000, 1507.0000, 1508.0000, 1508.8000, 1509.8000, 1510.8000, 1511.8000, 1512.8000, 1513.8000, 1514.8000, 1515.8000, 1516.8000, 1517.6000,
                              1518.6000, 1519.6000, 1520.6000, 1521.8000, 1523.0000, 1524.6000, 1525.8000, 1527.0000, 1528.6000, 1529.8000, 1531.0000, 1532.8000, 1533.8000, 1535.0000, 1536.6000,
                              1537.6000, 1538.6000, 1539.6000, 1540.4000, 1541.4000, 1542.4000, 1543.4000, 1544.4000, 1545.4000, 1546.4000, 1547.4000, 1548.4000, 1549.4000, 1550.2000, 1551.2000,
                              1552.2000, 1553.6000, 1554.8000, 1555.8000, 1557.0000, 1558.0000, 1559.2000, 1560.6000, 1561.8000, 1562.8000, 1564.0000, 1565.0000, 1566.2000, 1567.6000, 1568.8000,
                              1569.8000, 1570.8000, 1571.8000, 1572.8000, 1573.6000, 1574.6000, 1575.6000, 1576.6000, 1577.6000, 1578.6000, 1579.6000, 1580.6000, 1581.6000, 1582.6000, 1583.6000,
                              1584.8000, 1585.8000, 1586.8000, 1588.0000, 1589.0000, 1590.4000, 1591.8000, 1592.8000, 1594.0000, 1595.0000, 1596.0000, 1597.4000, 1598.8000, 1599.8000, 1600.8000,
                              1601.8000, 1602.8000, 1603.8000, 1604.8000, 1605.8000, 1606.8000, 1607.8000, 1608.8000, 1609.8000, 1610.6000, 1611.6000, 1612.6000, 1613.6000, 1614.4000, 1615.4000,
                              1616.4000, 1617.6000, 1618.8000, 1619.8000, 1621.0000, 1622.0000, 1623.2000, 1624.4000, 1625.8000, 1626.8000, 1627.8000, 1629.0000, 1630.0000, 1631.2000, 1632.4000,
                              1633.4000, 1634.4000, 1635.4000, 1636.4000, 1637.4000, 1638.4000, 1639.4000, 1640.4000, 1641.2000, 1642.2000, 1643.2000, 1644.2000, 1645.2000, 1646.2000, 1647.2000,
                              1648.2000, 1649.4000, 1650.4000, 1651.4000, 1652.4000, 1653.6000, 1654.6000, 1655.6000, 1656.8000, 1657.8000, 1658.8000, 1659.8000, 1660.8000, 1661.8000, 1662.8000,
                              1663.8000, 1664.8000, 1666.0000, 1667.0000, 1668.2000, 1669.4000, 1670.6000, 1671.8000, 1672.8000, 1673.8000, 1675.0000, 1676.0000, 1677.2000, 1678.4000, 1679.6000,
                              1680.8000, 1681.8000, 1682.8000, 1683.8000, 1684.8000, 1685.8000, 1686.8000, 1687.8000, 1688.8000, 1689.8000, 1690.8000, 1691.8000, 1692.8000, 1693.8000, 1694.8000,
                              1695.8000, 1696.8000, 1698.0000, 1699.2000, 1700.4000, 1701.8000, 1702.8000, 1704.0000, 1705.0000, 1706.4000, 1707.6000, 1708.8000, 1709.8000, 1711.0000, 1712.2000,
                              1713.2000, 1714.2000, 1715.2000, 1716.2000, 1717.2000, 1718.2000, 1719.2000, 1720.2000, 1721.4000, 1722.4000, 1723.4000, 1724.4000, 1725.4000, 1726.4000, 1727.4000,
                              1728.6000, 1729.8000, 1731.0000, 1732.0000, 1733.2000, 1734.8000, 1735.8000, 1737.0000, 1738.0000, 1739.4000, 1740.8000, 1741.8000, 1743.0000, 1744.2000, 1746.8000,
                              1749.0000, 1751.8000, 1754.0000, 1756.6000, 1759.0000, 1760.6000, 1761.0000, 1761.8000, 1762.0000, 1762.8000, 1763.0000, 1763.8000, 1764.2000, 1764.8000, 1765.4000,
                              1765.8000, 1766.4000, 1767.0000, 1767.6000, 1768.0000, 1768.8000, 1769.0000, 1769.8000, 1770.0000, 1770.8000, 1771.2000, 1771.8000, 1772.4000, 1773.0000, 1773.6000,
                              1774.0000, 1774.8000, 1775.0000, 1775.8000, 1776.0000, 1778.0000, 1779.8000, 1781.8000, 1783.2000, 1785.0000, 1787.0000, 1788.8000, 1790.6000, 1792.2000, 1793.4000,
                              1794.8000, 1795.8000, 1797.0000, 1798.0000, 1799.4000, 1800.8000, 1801.8000, 1803.0000, 1804.0000, 1805.2000, 1806.6000, 1807.8000, 1808.8000, 1809.8000, 1810.8000,
                              1811.8000, 1813.0000, 1814.0000, 1815.0000, 1816.0000, 1817.0000, 1818.0000, 1819.0000, 1820.0000, 1821.0000, 1822.0000, 1823.0000, 1824.0000, 1825.4000, 1826.6000,
                              1827.8000, 1828.8000, 1829.8000, 1831.0000, 1832.0000, 1833.2000, 1834.4000, 1835.8000, 1836.8000, 1837.8000, 1839.0000, 1840.0000, 1841.0000, 1842.0000, 1843.0000,
                              1844.0000, 1845.0000, 1846.2000, 1847.2000, 1848.2000, 1849.2000, 1850.4000, 1851.4000, 1852.4000, 1853.4000, 1854.6000, 1855.6000, 1856.6000, 1857.6000, 1858.8000,
                              1859.8000, 1860.8000, 1861.8000, 1862.8000, 1863.8000, 1864.8000, 1865.8000, 1866.8000, 1867.8000, 1868.8000, 1869.8000, 1870.8000, 1871.8000, 1872.8000, 1874.0000,
                              1875.0000, 1876.0000, 1877.0000, 1878.2000, 1879.4000, 1880.6000, 1881.8000, 1882.8000, 1883.8000, 1884.8000, 1885.8000, 1887.0000, 1888.0000, 1889.0000, 1890.0000,
                              1891.0000, 1892.0000, 1893.0000, 1894.0000, 1895.0000, 1896.0000, 1897.0000, 1898.0000, 1899.0000, 1900.2000, 1901.2000, 1902.2000, 1903.2000, 1904.2000, 1905.8000,
                              1906.8000, 1908.0000, 1909.4000, 1910.8000, 1911.8000, 1913.0000, 1914.4000, 1915.8000, 1916.8000, 1918.0000, 1919.4000, 1920.6000, 1921.6000, 1922.6000, 1923.6000,
                              1924.6000, 1925.4000, 1926.4000, 1927.4000, 1928.4000, 1929.2000, 1930.2000, 1931.2000, 1932.2000, 1933.2000, 1934.0000, 1935.0000, 1936.0000, 1937.4000, 1938.6000,
                              1939.8000, 1940.8000, 1942.0000, 1943.0000, 1944.4000, 1945.8000, 1946.8000, 1948.0000, 1949.0000, 1950.2000, 1951.4000, 1952.6000, 1953.8000, 1954.8000, 1955.8000,
                              1956.8000, 1957.8000, 1958.8000, 1959.8000, 1960.8000, 1961.8000, 1962.8000, 1963.8000, 1964.8000, 1965.8000, 1966.8000, 1967.8000, 1969.0000, 1970.0000, 1971.6000,
                              1972.8000, 1974.0000, 1975.0000, 1976.6000, 1977.8000, 1979.0000, 1980.0000, 1981.6000, 1982.8000, 1984.0000, 1985.0000, 1986.0000, 1987.0000, 1987.8000, 1988.8000,
                              1989.8000, 1990.8000, 1991.8000, 1992.8000, 1993.8000, 1994.8000, 1995.8000, 1996.8000, 1997.6000, 1998.6000, 1999.6000, 2000.6000, 2001.8000, 2003.0000, 2004.0000,
                              2005.4000, 2006.8000, 2007.8000, 2009.0000, 2010.2000, 2011.6000, 2012.8000, 2014.0000, 2015.0000, 2016.4000, 2017.4000, 2018.4000, 2019.4000, 2020.4000, 2021.4000,
                              2022.4000, 2023.4000, 2024.4000, 2025.2000, 2026.2000, 2027.2000, 2028.2000, 2029.2000, 2030.2000, 2031.2000, 2032.0000, 2032.8000, 2033.0000, 2033.2000, 2033.8000,
                              2034.0000, 2034.2000, 2034.8000, 2035.0000, 2035.4000, 2035.8000, 2036.0000, 2036.4000, 2036.8000, 2037.0000, 2037.4000, 2037.8000, 2038.0000, 2038.6000, 2038.8000,
                              2039.0000, 2039.6000, 2039.8000, 2040.0000, 2040.8000, 2041.0000, 2041.0000, 2041.8000, 2042.0000, 2042.2000, 2042.8000, 2043.0000, 2043.2000, 2043.8000, 2044.0000,
                              2044.4000, 2044.8000, 2045.0000, 2045.4000, 2045.8000, 2046.0000, 2046.6000, 2046.8000, 2047.0000, 2047.6000, 2047.8000, 2048.0000, 2049.0000, 2050.0000, 2051.2000,
                              2052.2000, 2053.2000, 2054.3999, 2055.3999, 2056.3999, 2057.6001, 2058.6001, 2059.6001, 2060.8000, 2061.8000, 2062.8000, 2063.8000, 2064.8000, 2065.8000, 2066.8000,
                              2068.0000, 2069.0000, 2070.0000, 2071.0000, 2072.0000, 2073.0000, 2074.2000, 2075.3999, 2076.3999, 2077.6001, 2078.8000, 2079.8000, 2080.8000, 2081.8000, 2082.8000,
                              2083.8000, 2085.0000, 2086.0000, 2087.0000, 2088.0000, 2089.0000, 2090.0000, 2091.0000, 2092.2000, 2093.2000, 2094.3999, 2095.6001, 2096.6001, 2097.6001, 2098.6001,
                              2099.6001, 2100.6001, 2101.6001, 2102.8000, 2103.8000, 2104.8000, 2105.8000, 2106.8000, 2107.8000, 2108.8000, 2109.8000, 2110.8000, 2111.8000, 2112.8000, 2113.8000,
                              2115.0000, 2116.0000, 2117.3999, 2118.6001, 2119.8000, 2120.8000, 2122.0000, 2123.0000, 2124.2000, 2125.3999, 2126.8000, 2127.8000, 2128.8000, 2129.8000, 2130.8000,
                              2131.8000, 2132.8000, 2133.8000, 2134.8000, 2135.8000, 2136.8000, 2137.8000, 2138.8000, 2139.8000, 2140.8000, 2141.8000, 2142.8000, 2143.8000, 2144.8000, 2146.0000,
                              2147.0000, 2148.3999, 2149.8000, 2150.8000, 2152.0000, 2153.2000, 2154.6001, 2155.8000, 2157.0000, 2158.0000, 2159.3999, 2160.6001, 2161.8000, 2162.8000, 2163.8000,
                              2164.8000, 2165.8000, 2166.8000, 2167.8000, 2168.8000, 2169.8000, 2170.8000, 2171.8000, 2172.8000, 2173.8000, 2174.8000, 2176.0000, 2177.0000, 2178.2000, 2179.8000,
                              2180.8000, 2182.0000, 2183.2000, 2184.8000, 2185.8000, 2187.0000, 2188.2000, 2189.8000, 2190.8000, 2192.0000, 2193.0000, 2194.0000, 2195.0000, 2196.2000, 2197.3999,
                              2198.3999, 2199.6001, 2200.6001, 2201.8000, 2202.8000, 2203.8000, 2204.8000, 2205.8000, 2206.8000, 2208.0000, 2209.0000, 2210.2000, 2211.6001, 2212.8000, 2214.0000,
                              2215.0000, 2216.3999, 2217.8000, 2218.8000, 2220.0000, 2221.0000, 2222.3999, 2223.8000, 2224.8000, 2225.8000, 2226.8000, 2227.8000, 2228.6001, 2229.6001, 2230.3999,
                              2231.3999, 2232.2000, 2233.2000, 2234.0000, 2235.0000, 2236.0000, 2237.0000, 2238.0000, 2239.0000, 2240.0000, 2241.0000, 2242.2000, 2243.6001, 2244.8000, 2245.8000,
                              2247.0000, 2248.2000, 2249.6001, 2250.8000, 2251.8000, 2253.0000, 2254.2000, 2255.6001, 2256.8000, 2257.8000, 2258.8000, 2259.8000, 2260.8000, 2261.8000, 2262.8000,
                              2263.8000, 2264.8000, 2265.8000, 2266.8000, 2267.8000, 2268.8000, 2270.0000, 2271.0000, 2272.0000, 2272.8000, 2273.8000, 2274.6001, 2275.3999, 2276.0000, 2277.0000,
                              2277.8000, 2278.8000, 2279.8000, 2280.3999, 2281.2000, 2282.0000, 2283.0000, 2283.8000, 2284.8000, 2285.6001, 2286.2000, 2287.0000, 2288.0000, 2289.3999, 2290.8000,
                              2292.3999, 2294.0000, 2295.3999, 2297.0000, 2298.3999, 2300.0000, 2301.6001, 2303.0000, 2304.3999, 2305.3999, 2306.3999, 2307.3999, 2308.3999, 2309.3999, 2310.3999,
                              2311.3999, 2312.3999, 2313.3999, 2314.3999, 2315.3999, 2316.3999, 2317.3999, 2318.6001, 2319.6001, 2320.6001, 2321.8000, 2323.0000, 2324.0000, 2325.2000, 2326.8000,
                              2327.8000, 2329.0000, 2330.0000, 2331.3999, 2332.8000, 2333.8000, 2335.0000, 2336.0000, 2337.2000, 2338.2000, 2339.2000, 2340.2000, 2341.3999, 2342.3999, 2343.3999,
                              2344.6001, 2345.6001, 2346.6001, 2347.8000, 2348.8000, 2349.8000, 2350.8000, 2351.8000, 2352.8000, 2354.0000, 2355.8000, 2357.0000, 2358.2000, 2359.8000, 2361.0000,
                              2362.3999, 2363.8000, 2365.0000, 2366.3999, 2367.8000, 2368.8000, 2369.8000, 2370.8000, 2371.8000, 2372.8000, 2373.8000, 2374.8000, 2375.8000, 2376.8000, 2377.8000,
                              2378.6001, 2379.6001, 2380.3999, 2381.3999, 2382.3999, 2383.2000, 2384.2000, 2385.6001, 2386.8000, 2388.0000, 2389.0000, 2390.2000, 2391.6001, 2392.8000, 2393.8000,
                              2395.0000, 2396.2000, 2397.6001, 2398.8000, 2399.8000, 2400.8000, 2401.8000, 2402.8000, 2403.8000, 2404.8000, 2405.8000, 2406.8000, 2407.8000, 2408.6001, 2409.6001,
                              2410.6001, 2411.3999, 2412.3999, 2413.2000, 2414.2000, 2415.0000, 2416.0000, 2417.6001, 2418.8000, 2420.0000, 2421.6001, 2422.8000, 2424.0000, 2425.6001, 2426.8000,
                              2428.0000, 2429.3999, 2430.8000, 2432.0000, 2433.0000, 2434.0000, 2435.0000, 2436.0000, 2437.0000, 2438.0000, 2439.0000, 2440.0000, 2441.0000, 2442.0000, 2443.0000,
                              2444.0000, 2445.0000, 2446.0000, 2446.8000, 2447.8000, 2449.0000, 2450.0000, 2451.0000, 2452.2000, 2453.3999, 2454.6001, 2455.8000, 2456.8000, 2457.8000, 2459.0000,
                              2460.0000, 2461.0000, 2462.2000, 2463.3999, 2464.6001, 2465.8000, 2466.8000, 2467.8000, 2468.8000, 2469.8000, 2471.0000, 2472.0000, 2473.0000, 2474.0000, 2475.0000,
                              2476.0000, 2477.2000, 2478.3999, 2479.3999, 2480.6001, 2481.6001, 2482.6001, 2483.6001, 2484.6001, 2485.6001, 2486.6001, 2487.6001, 2488.8000, 2489.8000, 2490.8000,
                              2491.8000, 2492.8000, 2493.8000, 2494.8000, 2495.8000, 2496.8000, 2497.8000, 2499.0000, 2500.0000, 2501.0000, 2502.2000, 2503.3999, 2504.8000, 2505.8000, 2506.8000,
                              2508.0000, 2509.0000, 2510.0000, 2511.3999, 2512.6001, 2513.6001, 2514.6001, 2515.8000, 2516.8000, 2517.8000, 2518.8000, 2519.8000, 2520.8000, 2521.8000, 2522.8000,
                              2523.8000, 2524.8000, 2526.0000, 2527.0000, 2528.0000, 2529.0000, 2530.3999, 2531.8000, 2532.8000, 2534.0000, 2535.0000, 2536.2000, 2537.6001, 2538.8000, 2540.0000,
                              2541.0000, 2542.2000, 2543.6001, 2544.8000, 2545.8000, 2546.8000, 2548.0000, 2549.0000, 2550.0000, 2551.0000, 2552.2000, 2553.3999, 2554.6001, 2555.8000, 2556.8000,
                              2557.8000, 2558.8000, 2560.0000, 2561.0000, 2562.2000, 2563.6001, 2564.8000, 2565.8000, 2567.0000, 2568.2000, 2569.6001, 2570.8000, 2571.8000, 2573.0000, 2574.2000,
                              2575.6001, 2576.8000, 2577.8000, 2578.8000, 2579.8000, 2580.8000, 2581.8000, 2582.6001, 2583.6001, 2584.6001, 2585.6001, 2586.6001, 2587.6001, 2588.6001, 2589.6001,
                              2590.6001, 2591.6001, 2592.6001, 2593.8000, 2594.8000, 2596.0000, 2597.0000, 2598.2000, 2599.6001, 2600.8000, 2601.8000, 2603.0000, 2604.0000, 2605.2000, 2606.3999,
                              2607.8000, 2608.8000, 2609.8000, 2610.8000, 2611.8000, 2612.8000, 2614.0000, 2615.0000, 2616.0000, 2617.0000, 2618.0000, 2619.0000, 2620.0000, 2621.0000, 2622.2000,
                              2623.2000, 2624.3999, 2625.6001, 2626.8000, 2627.8000, 2629.0000, 2630.0000, 2631.2000, 2632.3999, 2633.8000, 2634.8000, 2635.8000, 2637.0000, 2638.0000, 2639.2000,
                              2640.3999, 2641.6001, 2642.6001, 2643.8000, 2644.8000, 2645.8000, 2646.8000, 2647.8000, 2648.8000, 2649.8000, 2650.8000, 2651.8000, 2653.0000, 2654.0000, 2655.0000,
                              2656.0000, 2657.0000, 2658.0000, 2659.0000, 2660.2000, 2661.2000, 2662.3999, 2663.3999, 2664.6001, 2665.8000, 2666.8000, 2667.8000, 2668.8000, 2669.8000, 2670.8000,
                              2671.8000, 2673.0000, 2674.0000, 2675.0000, 2676.2000, 2677.3999, 2678.6001, 2679.8000, 2680.8000, 2681.8000, 2683.0000, 2684.0000, 2685.0000, 2686.2000, 2687.3999,
                              2688.6001, 2689.6001, 2690.6001, 2691.6001, 2692.8000, 2693.8000, 2694.8000, 2695.8000, 2696.8000, 2697.8000, 2698.8000, 2699.8000, 2700.8000, 2701.8000, 2702.8000,
                              2703.8000, 2704.8000, 2706.0000, 2707.0000, 2708.2000, 2709.3999, 2710.8000, 2711.8000, 2712.8000, 2714.0000, 2715.0000, 2716.3999, 2717.6001, 2718.8000, 2719.8000,
                              2720.8000, 2721.8000, 2722.8000, 2723.8000, 2724.8000, 2725.8000, 2726.8000, 2727.8000, 2728.8000, 2729.6001, 2730.6001, 2731.3999, 2732.3999, 2733.3999, 2734.2000,
                              2735.2000, 2736.0000, 2737.6001, 2738.8000, 2740.0000, 2741.3999, 2742.8000, 2744.0000, 2745.2000, 2746.8000, 2748.0000, 2749.2000, 2750.8000, 2751.8000, 2752.8000,
                              2753.8000, 2754.8000, 2755.8000, 2756.8000, 2757.8000, 2758.8000, 2759.6001, 2760.6001, 2761.3999, 2762.3999, 2763.2000, 2764.2000, 2765.0000, 2766.0000, 2767.0000,
                              2768.0000, 2769.2000, 2770.6001, 2771.8000, 2773.0000, 2774.0000, 2775.3999, 2776.8000, 2777.8000, 2779.0000, 2780.3999, 2781.8000, 2782.8000, 2784.0000, 2785.0000,
                              2786.0000, 2787.0000, 2788.0000, 2789.0000, 2790.0000, 2791.0000, 2792.0000, 2793.0000, 2794.0000, 2795.0000, 2796.0000, 2797.0000, 2798.0000, 2799.0000, 2800.0000,
                              2801.8000, 2803.3999, 2805.0000, 2806.8000, 2808.6001, 2810.0000, 2812.0000, 2813.8000, 2815.3999, 2816.8000, 2817.8000, 2819.0000, 2820.0000, 2821.0000, 2822.2000,
                              2823.3999, 2824.6001, 2825.8000, 2826.8000, 2827.8000, 2829.0000, 2830.0000, 2831.0000, 2833.3999, 2848.3999, 2849.0000, 2849.3999, 2849.8000, 2850.2000, 2850.8000,
                              2851.2000, 2851.8000, 2852.0000, 2852.8000, 2853.0000, 2853.8000, 2854.0000, 2854.6001, 2855.0000, 2855.6001, 2856.0000, 2856.3999, 2856.8000, 2857.3999, 2857.8000,
                              2858.2000, 2858.8000, 2859.0000, 2859.8000, 2860.0000, 2860.8000, 2861.0000, 2861.8000, 2862.0000, 2862.6001, 2863.0000, 2863.6001, 2864.0000, 2864.8000, 2865.8000,
                              2866.8000, 2867.8000, 2868.8000, 2869.8000, 2870.8000, 2871.8000, 2873.0000, 2874.0000, 2875.0000, 2876.0000, 2877.0000, 2878.0000, 2879.0000, 2880.0000, 2881.2000,
                              2882.2000, 2883.3999, 2884.6001, 2885.8000, 2886.8000, 2887.8000, 2888.8000, 2889.8000, 2891.0000, 2892.0000, 2893.0000, 2894.0000, 2895.2000, 2896.2000, 2897.2000,
                              2898.2000, 2899.2000, 2900.2000, 2901.2000, 2902.2000, 2903.2000, 2904.2000, 2905.2000, 2906.2000, 2907.2000, 2908.2000, 2909.2000, 2910.0000, 2911.0000, 2912.0000,
                              2913.2000, 2914.2000, 2915.3999, 2916.3999, 2917.6001, 2918.8000, 2919.8000, 2920.8000, 2921.8000, 2922.8000, 2923.8000, 2924.8000, 2926.0000, 2927.0000, 2928.0000,
                              2929.0000, 2930.0000, 2931.0000, 2932.0000, 2933.0000, 2934.0000, 2935.2000, 2936.2000, 2937.2000, 2938.2000, 2939.3999, 2940.3999, 2941.3999, 2942.6001, 2943.6001,
                              2944.6001, 2945.8000, 2946.8000, 2947.8000, 2949.0000, 2950.0000, 2951.2000, 2952.3999, 2953.6001, 2954.8000, 2955.8000, 2956.8000, 2958.0000, 2959.0000, 2960.0000,
                              2961.0000, 2962.0000, 2963.0000, 2964.0000, 2965.0000, 2966.0000, 2966.8000, 2967.8000, 2968.8000, 2969.8000, 2970.8000, 2971.8000, 2972.8000, 2973.6001, 2974.6001,
                              2975.3999, 2976.3999, 2977.8000, 2978.8000, 2980.0000, 2981.0000, 2982.2000, 2983.3999, 2984.8000, 2985.8000, 2987.0000, 2988.0000, 2989.0000, 2990.3999, 2991.8000,
                              2992.8000, 2993.8000, 2994.6001, 2995.6001, 2996.3999, 2997.3999, 2998.2000, 2999.2000, 3000.0000, 3001.0000, 3002.0000, 3003.0000, 3004.0000, 3005.0000, 3005.8000,
                              3006.8000, 3007.8000, 3008.8000, 3010.0000, 3011.0000, 3012.3999, 3013.6001, 3014.8000, 3015.8000, 3017.0000, 3018.0000, 3019.3999, 3020.8000, 3021.8000, 3023.0000,
                              3024.0000, 3025.0000, 3026.0000, 3027.0000, 3028.0000, 3029.0000, 3030.0000, 3030.8000, 3031.8000, 3032.8000, 3033.8000, 3034.8000, 3035.8000, 3036.8000, 3037.8000,
                              3038.8000, 3039.8000, 3040.8000, 3041.8000, 3042.8000, 3044.0000, 3045.0000, 3046.2000, 3047.3999, 3048.8000, 3049.8000, 3050.8000, 3052.0000, 3053.0000, 3054.0000,
                              3055.3999, 3056.6001, 3057.6001, 3058.8000, 3059.8000, 3060.8000, 3061.8000, 3063.0000, 3064.0000, 3065.0000, 3066.0000, 3067.0000, 3068.2000, 3069.2000, 3070.3999,
                              3071.6001, 3072.8000, 3073.8000, 3074.8000, 3075.8000, 3077.0000, 3078.0000, 3079.0000, 3080.2000, 3081.3999, 3082.6001, 3083.8000, 3084.8000, 3085.8000, 3087.0000,
                              3088.0000, 3089.0000, 3090.0000, 3090.8000, 3091.8000, 3092.8000, 3093.8000, 3094.8000, 3095.6001, 3096.6001, 3097.3999, 3098.2000, 3099.2000, 3100.0000, 3101.0000,
                              3102.0000, 3103.0000, 3104.0000, 3105.0000, 3106.0000, 3107.0000, 3108.2000, 3109.3999, 3110.6001, 3111.8000, 3112.8000, 3113.8000, 3115.0000, 3116.0000, 3117.0000,
                              3118.2000, 3119.3999, 3120.3999, 3121.2000, 3122.0000, 3123.0000, 3123.8000, 3124.8000, 3125.8000, 3126.6001, 3127.2000, 3128.0000, 3129.0000, 3130.0000, 3130.8000,
                              3131.8000, 3132.6001, 3133.3999, 3134.0000, 3135.0000, 3136.0000, 3137.0000, 3138.0000, 3139.0000, 3140.2000, 3141.3999, 3142.6001, 3143.8000, 3144.8000, 3145.8000,
                              3146.8000, 3148.0000, 3149.0000, 3150.0000, 3151.2000, 3152.2000, 3153.2000, 3154.0000, 3155.0000, 3156.0000, 3157.0000, 3157.8000, 3158.8000, 3159.8000, 3160.8000,
                              3161.6001, 3162.3999, 3163.2000, 3164.0000, 3165.0000, 3166.0000, 3167.0000, 3167.8000, 3168.8000, 3169.8000, 3171.0000, 3172.0000, 3173.0000, 3174.0000, 3175.0000,
                              3176.0000, 3177.0000, 3178.0000, 3179.0000, 3180.0000, 3181.0000, 3182.0000, 3183.2000, 3184.2000, 3185.0000, 3186.0000, 3187.0000, 3188.0000, 3189.0000, 3189.8000,
                              3190.8000, 3191.8000, 3192.8000, 3193.8000, 3194.8000, 3195.6001, 3196.3999, 3197.3999, 3198.2000, 3199.2000, 3200.0000, 3201.0000, 3202.0000, 3203.0000, 3204.0000,
                              3205.0000, 3206.0000, 3207.0000, 3208.0000, 3209.0000, 3210.0000, 3211.0000, 3212.0000, 3213.0000, 3214.0000, 3215.0000, 3216.0000, 3217.0000, 3217.8000, 3218.8000,
                              3219.6001, 3220.2000, 3221.0000, 3222.0000, 3222.8000, 3223.8000, 3224.3999, 3225.0000, 3226.0000, 3226.8000, 3227.8000, 3228.6001, 3229.3999, 3230.0000, 3231.0000,
                              3231.8000, 3232.8000, 3233.8000, 3234.8000, 3235.8000, 3236.8000, 3237.8000, 3238.8000, 3239.8000, 3240.8000, 3241.6001, 3242.6001, 3243.6001, 3244.6001, 3245.3999,
                              3246.3999, 3247.3999, 3248.2000, 3249.0000, 3250.0000, 3251.0000, 3251.8000, 3252.8000, 3253.8000, 3254.6001, 3255.2000, 3256.0000, 3257.0000, 3258.0000, 3258.8000,
                              3259.8000, 3260.8000, 3261.6001, 3262.2000, 3263.0000, 3264.0000, 3265.0000, 3266.0000, 3267.0000, 3268.0000, 3269.0000, 3270.0000, 3270.8000, 3271.8000, 3272.8000,
                              3273.8000, 3274.8000, 3275.8000, 3276.8000, 3277.8000, 3278.8000, 3279.8000, 3280.6001, 3281.6001, 3282.3999, 3283.2000, 3284.2000, 3285.0000, 3286.0000, 3287.0000,
                              3288.0000, 3289.0000, 3289.8000, 3290.8000, 3291.8000, 3292.8000, 3293.8000, 3294.6001, 3295.3999, 3296.2000, 3297.0000, 3298.0000, 3298.8000, 3299.8000, 3300.8000,
                              3301.3999, 3302.2000, 3303.0000, 3304.0000, 3304.8000, 3305.8000, 3306.6001, 3307.2000, 3308.0000, 3309.0000, 3309.8000, 3310.8000, 3311.8000, 3312.8000, 3314.0000,
                              3315.2000, 3316.8000, 3318.0000, 3319.3999, 3320.8000, 3322.0000, 3323.8000, 3325.0000, 3326.2000, 3327.8000, 3328.8000, 3329.8000, 3330.8000, 3331.8000, 3332.8000,
                              3333.8000, 3334.8000, 3335.8000, 3336.8000, 3337.8000, 3338.8000, 3339.8000, 3340.8000, 3341.8000, 3342.8000, 3343.8000, 3344.6001, 3345.0000, 3345.8000, 3346.6001,
                              3347.0000, 3347.8000, 3348.3999, 3349.0000, 3349.8000, 3350.2000, 3351.0000, 3351.8000, 3352.2000, 3353.0000, 3353.8000, 3354.0000, 3354.8000, 3355.6001, 3356.0000,
                              3356.8000, 3357.3999, 3358.0000, 3358.8000, 3359.3999, 3360.0000, 3360.8000, 3361.3999, 3362.0000, 3362.8000, 3363.8000, 3364.2000, 3365.0000, 3365.8000, 3366.6001,
                              3367.0000, 3368.0000, 3368.8000, 3369.3999, 3370.0000, 3370.8000, 3371.6001, 3372.0000, 3373.0000, 3373.8000, 3374.3999, 3375.0000, 3375.8000, 3376.8000, 3377.8000,
                              3378.8000, 3379.6001, 3380.6001, 3381.3999, 3382.2000, 3383.2000, 3384.0000, 3385.0000, 3386.0000, 3387.0000, 3388.0000, 3389.0000, 3389.8000, 3390.8000, 3391.8000,
                              3392.8000, 3393.6001, 3394.3999, 3395.0000, 3396.0000, 3397.0000, 3397.8000, 3398.8000, 3399.6001, 3400.2000, 3401.0000, 3402.0000, 3402.8000, 3403.8000, 3404.8000,
                              3405.6001, 3406.2000, 3407.0000, 3408.0000, 3408.8000, 3409.6001, 3410.2000, 3411.0000, 3411.8000, 3412.6001, 3413.2000, 3414.0000, 3414.8000, 3415.6001, 3416.2000,
                              3417.0000, 3417.8000, 3418.6001, 3419.2000, 3420.0000, 3420.8000, 3421.6001, 3422.2000, 3423.0000, 3423.8000, 3424.8000, 3425.3999, 3426.2000, 3427.0000, 3428.0000,
                              3428.8000, 3429.8000, 3430.6001, 3431.3999, 3432.0000, 3433.0000, 3434.0000, 3434.8000, 3435.8000, 3436.6001, 3437.2000, 3438.0000, 3439.0000, 3439.8000, 3440.8000,
                              3441.3999, 3442.0000, 3443.0000, 3443.8000, 3444.3999, 3445.0000, 3446.0000, 3446.8000, 3447.3999, 3448.0000, 3449.0000, 3449.8000, 3450.3999, 3451.0000, 3452.0000,
                              3452.8000, 3453.6001, 3454.0000, 3455.0000, 3455.8000, 3456.6001, 3457.3999, 3458.0000, 3459.0000, 3460.0000, 3460.8000, 3461.8000, 3462.6001, 3463.2000, 3464.0000,
                              3465.0000, 3466.0000, 3466.8000, 3467.8000, 3468.6001, 3469.2000, 3470.0000, 3471.0000, 3471.8000, 3472.8000, 3473.3999, 3474.0000, 3475.0000, 3475.8000, 3476.6001,
                              3477.0000, 3478.0000, 3478.8000, 3479.6001, 3480.2000, 3481.0000, 3481.8000, 3482.6001, 3483.2000, 3484.0000, 3484.8000, 3485.8000, 3486.2000, 3487.0000, 3487.8000,
                              3488.8000, 3489.0000, 3490.0000, 3490.8000, 3491.2000, 3492.0000, 3492.8000, 3493.2000, 3494.0000, 3494.8000, 3495.2000, 3496.0000, 3496.8000, 3497.3999, 3498.0000,
                              3498.8000, 3499.3999, 3500.0000, 3500.8000, 3501.3999, 3502.0000, 3502.8000, 3503.3999, 3504.0000, 3505.0000, 3505.8000, 3506.8000, 3507.6001, 3508.3999, 3509.0000,
                              3510.0000, 3511.0000, 3511.8000, 3512.8000, 3513.6001, 3514.3999, 3515.0000, 3516.0000, 3517.0000, 3517.8000, 3518.8000, 3519.6001, 3520.3999, 3521.0000, 3521.8000,
                              3522.6001, 3523.0000, 3523.8000, 3524.8000, 3525.2000, 3526.0000, 3526.8000, 3527.3999, 3528.0000, 3528.8000, 3529.6001, 3530.0000, 3531.0000, 3531.8000, 3532.3999,
                              3533.0000, 3533.8000, 3534.6001, 3535.0000, 3535.8000, 3536.8000, 3537.2000, 3538.0000, 3538.8000, 3539.2000, 3540.0000, 3540.8000, 3541.3999, 3542.0000, 3542.8000,
                              3543.3999, 3544.0000, 3544.8000, 3545.6001, 3546.0000, 3546.8000, 3547.8000, 3548.0000, 3549.0000, 3549.8000, 3550.2000, 3551.0000, 3551.8000, 3552.3999, 3553.0000,
                              3553.8000, 3554.6001, 3555.0000, 3556.0000, 3556.8000, 3557.2000, 3558.0000, 3558.8000, 3559.6001, 3560.0000, 3560.8000, 3561.8000, 3562.2000, 3563.0000, 3563.8000,
                              3564.3999, 3565.0000, 3565.8000, 3566.8000, 3567.2000, 3568.0000, 3568.8000, 3569.6001, 3570.2000, 3571.0000, 3572.0000, 3572.8000, 3573.6001, 3574.2000, 3575.0000,
                              3575.8000, 3576.8000, 3577.3999, 3578.0000, 3579.0000, 3579.8000, 3580.6001, 3581.2000, 3582.0000, 3583.0000, 3583.8000, 3584.3999, 3585.0000, 3585.8000, 3586.6001,
                              3587.0000, 3587.8000, 3588.8000, 3589.0000, 3590.0000, 3590.8000, 3591.2000, 3592.0000, 3592.8000, 3593.2000, 3594.0000, 3594.8000, 3595.3999, 3596.0000, 3596.8000,
                              3597.6001, 3598.0000, 3598.8000, 3599.6001, 3600.0000, 3600.8000, 3601.6001, 3602.0000, 3602.8000, 3603.2000, 3604.0000, 3604.8000, 3605.0000, 3605.8000, 3606.6001,
                              3607.0000, 3607.8000, 3608.3999, 3609.0000, 3609.8000, 3610.0000, 3610.8000, 3611.6001, 3612.0000, 3612.8000, 3613.3999, 3614.0000, 3614.8000, 3615.2000, 3615.8000,
                              3616.8000, 3617.3999, 3618.0000, 3619.0000, 3619.8000, 3620.8000, 3621.3999, 3622.0000, 3623.0000, 3623.8000, 3624.8000, 3625.3999, 3626.0000, 3627.0000, 3627.8000,
                              3628.8000, 3629.3999, 3630.0000, 3631.0000, 3631.8000, 3632.6001, 3633.0000, 3633.8000, 3634.3999, 3635.0000, 3635.8000, 3636.2000, 3637.0000, 3637.8000, 3638.0000,
                              3638.8000, 3639.6001, 3640.0000, 3640.8000, 3641.2000, 3642.0000, 3642.8000, 3643.0000, 3643.8000, 3644.6001, 3645.0000, 3645.8000, 3646.3999, 3647.0000, 3647.8000,
                              3648.2000, 3649.0000, 3649.8000, 3650.0000, 3650.8000, 3651.6001, 3652.0000, 3652.8000, 3653.6001, 3654.0000, 3654.8000, 3655.3999, 3656.0000, 3656.8000, 3657.3999,
                              3658.0000, 3658.8000, 3659.2000, 3660.0000, 3660.8000, 3661.0000, 3661.8000, 3662.6001, 3663.0000, 3663.8000, 3664.6001, 3665.0000, 3665.8000, 3666.3999, 3667.0000,
                              3667.8000, 3668.2000, 3668.8000, 3669.6001, 3670.0000, 3670.8000, 3671.3999, 3672.0000, 3672.8000, 3673.2000, 3674.0000, 3674.8000, 3675.0000, 3675.8000, 3676.6001,
                              3677.0000, 3677.8000, 3678.3999, 3679.0000, 3679.8000, 3680.2000, 3681.0000, 3681.8000, 3682.2000, 3683.0000, 3683.8000, 3684.0000, 3685.0000, 3685.8000, 3686.0000,
                              3686.8000, 3687.6001, 3688.0000, 3688.8000, 3689.6001, 3690.0000, 3690.8000, 3691.6001, 3692.0000, 3692.8000, 3693.6001, 3694.0000, 3694.8000, 3695.3999, 3696.0000,
                              3696.8000, 3697.3999, 3698.0000, 3698.8000, 3699.0000, 3699.8000, 3700.6001, 3701.0000, 3701.8000, 3702.2000, 3703.0000, 3703.8000, 3704.0000, 3704.8000, 3705.3999,
                              3706.0000, 3706.8000, 3707.2000, 3708.0000, 3708.6001, 3709.0000, 3709.8000, 3710.3999, 3711.0000, 3711.8000, 3712.2000, 3712.8000, 3713.3999, 3714.0000, 3714.8000,
                              3715.0000, 3715.8000, 3716.2000, 3716.8000, 3717.3999, 3718.0000, 3718.8000, 3719.0000, 3719.8000, 3720.2000, 3720.8000, 3721.3999, 3722.0000, 3722.8000, 3723.0000,
                              3723.8000, 3724.2000, 3724.8000, 3725.6001, 3726.0000, 3726.8000, 3727.0000, 3727.8000, 3728.2000, 3729.0000, 3729.8000, 3730.0000, 3730.8000, 3731.3999, 3732.0000,
                              3732.8000, 3733.0000, 3733.8000, 3734.3999, 3735.0000, 3735.8000, 3736.2000, 3736.8000, 3737.6001, 3738.0000, 3738.8000, 3739.2000, 3740.0000, 3740.6001, 3741.0000,
                              3741.8000, 3742.3999, 3743.0000, 3743.8000, 3744.0000, 3744.8000, 3745.3999, 3746.0000, 3746.8000, 3747.0000, 3747.8000, 3748.3999, 3749.0000, 3749.8000, 3750.0000,
                              3750.8000, 3751.3999, 3752.0000, 3752.8000, 3753.0000, 3753.8000, 3754.2000, 3755.0000, 3755.6001, 3756.0000, 3756.8000, 3757.2000, 3758.0000, 3758.6001, 3759.0000,
                              3759.8000, 3760.2000, 3761.0000, 3761.8000, 3762.0000, 3762.8000, 3763.3999, 3764.0000, 3764.8000, 3765.0000, 3765.8000, 3766.6001, 3767.0000, 3767.8000, 3768.2000,
                              3769.0000, 3769.6001, 3770.0000, 3770.8000, 3771.3999, 3772.0000, 3772.8000, 3773.0000, 3773.8000, 3774.3999, 3775.0000, 3775.8000, 3776.2000, 3777.0000, 3777.8000,
                              3778.2000, 3779.0000, 3779.8000, 3780.2000, 3781.0000, 3781.8000, 3782.2000, 3783.0000, 3783.8000, 3784.2000, 3785.0000, 3785.8000, 3786.2000, 3787.0000, 3787.8000,
                              3788.2000, 3789.0000, 3789.8000, 3790.2000, 3791.0000, 3791.8000, 3792.2000, 3792.8000, 3793.3999, 3794.0000, 3794.6001, 3795.0000, 3795.8000, 3796.0000, 3796.8000,
                              3797.2000, 3797.8000, 3798.3999, 3799.0000, 3799.6001, 3800.0000, 3800.8000, 3801.0000, 3801.8000, 3802.0000, 3802.8000, 3803.2000, 3803.8000, 3804.3999, 3805.0000,
                              3805.6001, 3806.0000, 3806.8000, 3807.0000, 3807.8000, 3808.2000, 3808.8000, 3809.6001, 3810.0000, 3810.8000, 3811.2000, 3812.0000, 3812.6001, 3813.0000, 3813.8000,
                              3814.2000, 3815.0000, 3815.8000, 3816.0000, 3816.8000, 3817.3999, 3818.0000, 3818.8000, 3819.0000, 3819.8000, 3820.3999, 3821.0000, 3821.8000, 3822.0000, 3822.8000,
                              3823.3999, 3824.0000, 3824.8000, 3825.8000, 3826.8000, 3827.6001, 3828.3999, 3829.2000, 3830.0000, 3831.0000, 3832.0000, 3832.8000, 3833.8000, 3834.8000, 3835.6001,
                              3836.3999, 3837.2000, 3838.0000, 3839.0000, 3840.0000, 3840.8000, 3841.0000, 3841.8000, 3842.3999, 3843.0000, 3843.8000, 3844.0000, 3844.8000, 3845.3999, 3846.0000,
                              3846.8000, 3847.0000, 3847.8000, 3848.3999, 3849.0000, 3849.8000, 3850.0000, 3850.8000, 3851.3999, 3852.0000, 3852.8000, 3853.0000, 3853.8000, 3854.2000, 3855.0000,
                              3855.6001, 3856.0000, 3856.8000, 3857.2000, 3857.8000, 3858.6001, 3859.0000, 3859.8000, 3860.2000, 3860.8000, 3861.3999, 3862.0000, 3862.8000, 3863.0000, 3863.8000,
                              3864.3999, 3865.0000, 3865.8000, 3866.0000, 3866.8000, 3867.2000, 3868.0000, 3868.6001, 3869.0000, 3869.8000, 3870.2000, 3870.8000, 3871.6001, 3872.0000, 3872.8000,
                              3873.0000, 3873.8000, 3874.2000, 3875.0000, 3875.6001, 3876.0000, 3876.8000, 3877.0000, 3877.8000, 3878.2000, 3878.8000, 3879.6001, 3880.0000, 3880.8000, 3881.0000,
                              3881.8000, 3882.2000, 3882.8000, 3883.6001, 3884.0000, 3884.8000, 3885.0000, 3885.8000, 3886.2000, 3886.8000, 3887.3999, 3888.0000, 3888.8000, 3889.0000, 3889.8000,
                              3890.0000, 3890.8000, 3891.0000, 3891.8000, 3892.2000, 3892.8000, 3893.2000, 3893.8000, 3894.3999, 3895.0000, 3895.6001, 3896.0000, 3896.6001, 3897.0000, 3897.8000,
                              3898.0000, 3898.8000, 3899.0000, 3899.8000, 3900.2000, 3900.8000, 3901.2000, 3901.8000, 3902.3999, 3903.0000, 3903.6001, 3904.0000, 3904.8000, 3905.0000, 3905.8000,
                              3906.0000, 3906.8000, 3907.2000, 3907.8000, 3908.3999, 3909.0000, 3909.6001, 3910.0000, 3910.8000, 3911.0000, 3911.8000, 3912.2000, 3912.8000, 3913.3999, 3914.0000,
                              3914.6001, 3915.0000, 3915.8000, 3916.0000, 3916.8000, 3917.2000, 3917.8000, 3918.3999, 3919.0000, 3919.6001, 3920.0000, 3920.8000, 3921.0000, 3921.8000, 3922.0000,
                              3922.8000, 3923.2000, 3923.8000, 3924.3999, 3925.0000, 3925.6001, 3926.0000, 3926.6001, 3927.0000, 3927.8000, 3928.0000, 3928.8000, 3929.2000, 3929.8000, 3930.2000,
                              3930.8000, 3931.3999, 3932.0000, 3932.6001, 3933.0000, 3933.8000, 3934.0000, 3934.8000, 3935.0000, 3935.8000, 3936.2000, 3936.8000, 3937.3999, 3938.0000, 3938.6001,
                              3939.0000, 3939.8000, 3940.0000, 3940.8000, 3941.0000, 3941.8000, 3942.2000, 3942.8000, 3943.3999, 3944.0000, 3944.6001, 3945.0000, 3945.8000, 3946.0000, 3946.8000,
                              3947.0000, 3947.8000, 3948.2000, 3948.8000, 3949.3999, 3950.0000, 3950.6001, 3951.0000, 3951.8000, 3952.0000, 3952.8000, 3953.0000, 3953.8000, 3954.2000, 3954.8000,
                              3955.3999, 3956.0000, 3956.3999, 3957.0000, 3957.6001, 3958.0000, 3958.8000, 3959.0000, 3959.8000, 3960.0000, 3960.8000, 3961.2000, 3961.8000, 3962.3999, 3963.0000,
                              3963.6001, 3964.0000, 3964.8000, 3965.0000, 3965.8000, 3966.0000, 3966.8000, 3967.2000, 3967.8000, 3968.3999, 3968.8000, 3969.3999, 3970.0000, 3970.3999, 3971.0000,
                              3971.6001, 3972.0000, 3972.6001, 3973.0000, 3973.6001, 3974.0000, 3974.6001, 3975.0000, 3975.8000, 3976.0000, 3976.8000, 3977.0000, 3977.8000, 3978.0000, 3978.8000,
                              3979.0000, 3979.8000, 3980.0000, 3980.8000, 3981.0000, 3981.8000, 3982.0000, 3982.8000, 3983.2000, 3983.8000, 3984.2000, 3984.8000, 3985.3999, 3986.0000, 3986.6001,
                              3987.0000, 3987.8000, 3988.0000, 3988.8000, 3989.0000, 3989.8000, 3990.2000, 3990.8000, 3991.3999, 3992.0000, 3992.6001, 3993.0000, 3993.8000, 3994.0000, 3994.8000,
                              3995.2000, 3995.8000, 3996.3999, 3997.0000, 3997.6001, 3998.0000, 3998.8000, 3999.0000, 3999.8000, 4000.0000, 4001.0000, 4001.8000, 4002.8000, 4003.2000, 4004.0000,
                              4005.0000, 4005.8000, 4006.6001, 4007.0000, 4008.0000, 4008.8000, 4009.8000, 4010.3999, 4011.0000, 4012.0000, 4012.8000, 4013.6001, 4014.2000, 4015.0000, 4015.80
                            };

//---------------------------------------------------------------ADEQUAÇÃO DOS SMEs CAPTURADOS DO MYOWARE-------------------------------------------------------------
// Os pinos do ESP32 podem trabalhar com até 3,3 V de saída. E a resolução A/D do ESP32 é de 12 bits -> 2^12 = 4096 (0 à 4095).
// Quando os SMEs chegam em um pino definido como entrada (aqui, GPIO 32) eles são convertidos em um valor respectivo entre 0 à 4095.
// Mas precisamos processasr os SMEs no seu valor de tensão capturado na superfície eletrolítica dos eletrodos.
// Dessa forma, é necessário adequar esse valor para obter o valor em milivolts gerados na superfície da pele, no contato com os eletrodos passivos de gel.
// Essa conversão é realizada pela equação abaixo:
//     Vmv = ((Vad * 3,3 ) / 4095 )) * (1 / 201) - > ( Vad * 3,3 ) / (4095 * 201)
// onde,
// 3,3 é a tensão máxima de saída do ESP32;
// 4095 é o valor máximo da resolução de 12 bits dos ESP32;
// 1/201 é o valor de ganho da plataforma MyoWare, esse valor é constante pois o potenciometro ajustável não tem efeito no pino raw.
// Vad (valor A/D)é o valor proveniente do MyoWare, recebido no GPIO 32 configurado como entrada analógica;
// Vmv (valor milivolts) é o Vad convertido.
double constante = 4.009257741e-6; // Resolução do termo (3.3)/(4095 *(201), simplificando a equação para Vmv = Vad * constante.

//------------------------------------------------------------------------NORMALIZAÇÃO POR CVM------------------------------------------------------------------------
// Valor das CVMs retiradas dos conjunto de aprendizagem 1 à 4, e a média das quatro CVMs foi utilizada para normalização. Os dados são normalizados usando RMS/CVM e DASDV/CVM.
// Não é recomendado substituir este valor por um CVM que não esteja incluido no treino do classificador.
// 1/CVM = 2.782305249539014e+03
//--------------------------------------------------------------------VARIÁVEIS DO VOTO MAJORITÁRIO-------------------------------------------------------------------
// Os SMEs são processados em características que são discriminadas a partir da distância Mahalanobis.
// Para garantir que não houvesse uma grande quantidade de falsos positivos/negativos, foi aplicado como pós-processamento o voto majoritário.
// Ele guarda 3 classes recém processadas e determina qual ocorreu com maior frequência entre as três, enviando ao SRA a classe com maior ocorrência.
// Após o envio, as 3 classes são descartadas, e o STI guarda mais 3 novas classes processadas para a decisão por voto majoritário.
int MV[3]; // Vetor que guarda as classes processadas.
int u = 0; // Índice do vetor de voto majoritário.
int mvsum = 0; // Contador auxiliar para determinar qual classe ocorreu com maior frequência.

//----------------------------------------------------------------------------SERVIDOR BLE----------------------------------------------------------------------------
// Site para gerar UUIDs:
// https://www.uuidgenerator.net/
#define SERVICE_UUID        "f57b1135-8c51-4e7b-be18-07b9cfa1507a" // Endereço do servidor STI.
#define CHARACTERISTIC_UUID "ad87f04a-5075-4109-8b84-f0b1b8ed173f" // Endereço pelo qual os dados serão enviados.
BLECharacteristic *pCharacteristic; // Variável que guarda o dado a ser enviado.

//---------------------------------------------------------------------------------------------------SETUP---------------------------------------------------------------------------------------------------
void setup() {
  Serial.begin(115200); //
  Serial.println("Iniciando conexao BLE!");
  BLEDevice::init(""); // Inicia o BLE.
  Serial.println("Iniciada conexao BLE!");
  BLEServer *pServer = BLEDevice::createServer(); // Cria o servidor BLE.
  BLEService *pService = pServer->createService(SERVICE_UUID); // Coloca o endereço no servidor.
  pCharacteristic = pService->createCharacteristic( // Cria o canal para envio dos dados no endereço especificado.
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ | // Permite o servidor receber dados.
                      BLECharacteristic::PROPERTY_WRITE // Permite o servidor enviar dados.
                    );
  pService->start(); // Roda o servidor.
  pCharacteristic->setValue("Testando envio");
  Serial.println("Aguardando algum dispositivo conectar...");
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID); // Adiciona o endereço do servidor.
  pAdvertising->setScanResponse(true); // Permite ser encontrado por um scanner.
  pAdvertising->setMinPreferred(0x06);
  pAdvertising->setMinPreferred(0x12);
  BLEDevice::startAdvertising(); // Anuncia o servidor.
  Serial.println("Servidor STI rodando, iniciando envio da classe.");
}

//---------------------------------------------------------------------------------------------------LOOP---------------------------------------------------------------------------------------------------
void loop() {
  janelamento();
  filtro_bn();
  extracao();
  classificar();
}

void janelamento() {
  for (int w = 0; w < 80; w++) { // Segmenta os dados SMEs em tempo real em uma janela de 80 ms.
    x[t] = double(ADC_LUT[analogRead(32)] * constante); // Interpola os dados lidos no GPIO32 com os da LUT.
    delayMicroseconds(1000); // Delay para garantir leituras em 1 kHz.
    t++;
  }
}

void filtro_bn() {
  t = 0;
  n = 0;
  flag_reset = 0;
  dasdv_sum = 0; // Variável auxiliar usado na extração da característica DASDV.
  rms_sum = 0; // Variável auxiliar usado na extração da característica RMS.
  bn_cont = 0;
  for (int index = 0; index < 80; index++) { // Realiza a filtragem da janela de 0 à 79 amostras (80 amostras) dos SMEs. Cada amostra é coleta à 1 kHz, portanto é uma janela de 80 ms.
    if (bn_ant == false) { // Move a janela de SMEs capturados do MyoWare, se for a primeira filtragem após o início de STI.
      x_t1 = x[t - 1]; // Pega o dado da amostra SMEs da janela anterior x(79-1) para manter o filtro estável.
      if (t - 1 < 0 )x_t1 = 0; // Se o índice de x(t-1) for menor que 0, então o valor da amostra é 0. Essa condição é aplicada quando STI foi iniciado, e é a primeira vez que executa essa rotina. Não sendo o caso, o valor de x(t-1) continua como no comando anterior à este.
      x_t2 = x[t - 2];
      if (t - 2 < 0 )x_t2 = 0;
      x_t3 = x[t - 3];
      if (t - 3 < 0 )x_t3 = 0;
      x_t4 = x[t - 4];
      if (t - 4 < 0 )x_t4 = 0;
      Yc_n1 = Yc[n - 1];
      if (n - 1 < 0 & flag_reset == 0)Yc_n1 = 0;
      Yc_n2 = Yc[n - 2];
      if (n - 2 < 0 & flag_reset == 0)Yc_n2 = 0;
      if (flag_reset == 2) { // A segunda etapa utiliza um recurso antes do reset e um recurso recém processado pelo filtro. Essa etapa é um intermédio antes do filtro voltar a utilizar o vetor normalmente até o índice limite.
        Yc_n2 = Yc_n1_reset; // [-,-,n-2,n-1,-]
        Yc_n1 = Yc[n - 1]; // [-,-,n-2,n-1,n]
        flag_reset = 0; // Continua a deslocar permitindo novos recursos ocuparem o vetor e serem utilizados pelo filtro, ou seja, n-2 e n-1 já podem ser descartados.
      }
      if (flag_reset == 1) { // Houve o reset do vetor Yc. A última posição do vetor é alocada na primeira, e a penúltima na segunda. Isso é necessário devido a característica recursiva do filtro.
        Yc_n1 = Yc_n1_reset; // [-,-,-,-,n-1]
        Yc_n2 = Yc_n2_reset; // [-,-,-,n-2,n-1]
        flag_reset = 2;
      }
    }
    if (bn_ant == true) { // Se houver uma janela anterior filtrada, os dados SMEs do MyoWare da janela anterior e os dados filtrados pelo Butterworth+Notch são resgatados, pois o filtro é recursivo.
      if (bn_cont > 0 & bn_cont < 4) { // Isso é realizado 3 vezes (a primeira é realizado na condição else if abaixo) para mover as informações da janela filtrada anterior completamente para a nova janela filtrada.
        x_t4 = x_t3; // x[t-4] recebe x[t-3] (anterior), i.e., a janela desloca uma unidade na janela filtrada anterior.
        x_t3 = x_t2; // x[t-3] recebe x[t-2] (anterior), i.e., a janela desloca uma unidade na janela filtrada anterior.
        x_t2 = x_t1; // x[t-2] recebe x[t-1] (anterior), i.e., a janela desloca uma unidade na janela filtrada anterior.
        x_t1 = x[t - 1]; // x[t-1] recebe x[t-1], i.e., a janela desloca uma unidade na janela filtrada atual.
        Yc_n2 = Yc_n1; // Yc[n-2] recebe Yc[n-1] (anterior), i.e., a janela desloca uma unidade na janela filtrada anterior.
        Yc_n1 = Yc[n - 1]; // Yc[n-1] recebe Yc[n-1], i.e., a janela desloca uma unidade na janela filtrada atual.
        bn_cont++; // Adiciona uma unidade no contador do translado de recursos da janela filtrada anterior para a atual.
      }
      else if (bn_cont == 0) { // Caso o filtro esteja na primeira amostra da nova janela de SMEs, resgata também os SMEs filtrados no Butterworth passa-alta e passa-baixa, além do Notch.
        x_t1 = x_ant; // x[t-1] recebe x[79] da janela filtrada anteriormente.
        x_t2 = x_t1_ant; // x[t-2] recebe x[78] da janela filtrada anteriormente.
        x_t3 = x_t2_ant; // x[t-3] recebe x[77] da janela filtrada anteriormente.
        x_t4 = x_t3_ant; // x[t-4] recebe x[76] da janela filtrada anteriormente.
        Ya[1] = Ya_ant; // Ya[1] recebe Ya[0] da janela filtrada anteriormente.
        Ya[2] = Ya_n1_ant; // Ya[2] recebe Ya[1] da janela filtrada anteriormente.
        Ya[3] = Ya_n2_ant; // Ya[3] recebe Ya[2] da janela filtrada anteriormente.
        Ya[4] = Ya_n3_ant; // Ya[4] recebe Ya[3] da janela filtrada anteriormente.
        Yb[1] = Yb_ant; // Yb[1] recebe Yb[0] da janela filtrada anteriormente.
        Yb[2] = Yb_n1_ant; // Yb[2] recebe Yb[1] da janela filtrada anteriormente.
        Yb[3] = Yb_n2_ant; // Yb[3] recebe Yb[2] da janela filtrada anteriormente.
        Yb[4] = Yb_n3_ant; // Yb[4] recebe Yb[3] da janela filtrada anteriormente.
        Yc_n1 = Yc_ant; // Yc[n-1] recebe Yc[n] da janela filtrada anteriormente.
        Yc_n2 = Yc_n1_ant; // Yc[n-2] recebe Yc[n-1] da janela filtrada anteriormente.
        bn_cont++; // Adiciona uma unidade no contador do translado de recursos da janela filtrada anterior para a atual.
      }
    }
    if (bn_cont >= 4) { // A partir da 4ª vez movendo os dados da janela filtrada anterior, o filtro estabiliza e pode usar o método inicial para deslocar o vetor que guarda os SMEs filtrados.
      bn_ant = false; // Dados filtrados da janela anterior incorporados na filtragem da janela atual, desativando deslocamento com os recursos da janela anterior.
    }
    Ya[0] = Ba[0] * x[t] + Ba[1] * x_t1 + Ba[2] * x_t2 + Ba[3] * x_t3 + Ba[4] * x_t4 - Aa[1] * Ya[1] - Aa[2] * Ya[2] - Aa[3] * Ya[3] - Aa[4] * Ya[4]; // Butterworth passa-alta
    Yb[0] = Bb[0] * Ya[0] + Bb[1] * Ya[1] + Bb[2] * Ya[2] + Bb[3] * Ya[3] + Bb[4] * Ya[4] - Ab[1] * Yb[1] - Ab[2] * Yb[2] - Ab[3] * Yb[3] - Ab[4] * Yb[4]; // Butterworth passa-baixa
    Yc[n] = Bn[0] * Yb[0] + Bn[1] * Yb[1] + Bn[2] * Yb[2] - An[1] * Yc_n1 - An[2] * Yc_n2;  // Notch 60 Hz
    
    // Features
    rms_sum += Yc[n] * Yc[n]; // Variável da auxiliar característica RMS para ser utilizada na rotina de extração.

    if (index > 0 && index < 79) { // Se não for a última amostra da janela, continua processando os dados para extração de DASDV.
      // Para implementar a DASDV em tempo real é necessário fazer um pequeno deslocamento de 1 unidade no index, visto que a leitura Yc[n + 1] ainda não foi realizada.
      // Assim, é realizado uma operação ao fim da rotina de filtragem para coletar o ultimo valor de Yc para extração.
      dasdv_aux = (Yc[n] - Yc[n - 1]); // Variável auxiliar da característica DASDV para ser utilizada na rotina de extração. 1/80-1 = 0.01265822785 | Janela disruptiva de 80 ms.
      dasdv_sum += dasdv_aux * dasdv_aux; // Outra variável auxiliar da característica DASDV.
    } 
    // Como o filtro é recursivo ele utiliza as saídas anteriores como entradas para equação do filtro. No entanto, os dados das janelas anteriores são descartados após a filtragem, os recursos de saída precisam ser salvos para serem utilizados na próxima janelas a ser filtrada.
    // Então, são salvos os recursos necessário nesta rotina. Estes recursos são implementados no ínicio da filtragem da próxima janela de SMEs.
    else if (index == 79) { // Se for a última amostra da janela: 
      // Computa ultima soma para a extração de DASDV.
      dasdv_aux = (Yc[n] - Yc[n - 1]);
      dasdv_sum += dasdv_aux * dasdv_aux;
      delay(1);
      // Os dados das ultimas amostras serão guardados para a filtragem na nova janela a ser capturada. Alocam os recursos da janela filtrada anterior.
      x_ant = x[79]; // Salva o dado da amostra 79 (pos. 80) para ser utilizada como recurso na nova janela de dados SMEs a ser filtrada.
      x_t1_ant = x[78]; // Salva o dado da amostra 78 (pos. 79) para ser utilizada como recurso na nova janela de dados SMEs a ser filtrada.
      x_t2_ant = x[77]; // Salva o dado da amostra 77 (pos. 78) para ser utilizada como recurso na nova janela de dados SMEs a ser filtrada.
      x_t3_ant = x[76]; // Salva o dado da amostra 76 (pos. 77) para ser utilizada como recurso na nova janela de dados SMEs a ser filtrada.
      Ya_ant = Ya[0]; // Salva o dado da amostra filtrada Ya[0] para ser utilizada como recurso na nova janela de dados SMEs a ser filtrada.
      Ya_n1_ant = Ya[1]; // Salva o dado da amostra filtrada Ya[1] para ser utilizada como recurso na nova janela de dados SMEs a ser filtrada.
      Ya_n2_ant = Ya[2]; // Salva o dado da amostra filtrada Ya[2] para ser utilizada como recurso na nova janela de dados SMEs a ser filtrada.
      Ya_n3_ant = Ya[3]; // Salva o dado da amostra filtrada Ya[3] para ser utilizada como recurso na nova janela de dados SMEs a ser filtrada.
      Yb_ant = Yb[0]; // Salva o dado da amostra filtrada Yb[0] para ser utilizada como recurso na nova janela de dados SMEs a ser filtrada.
      Yb_n1_ant = Yb[1]; // Salva o dado da amostra filtrada Yb[1] para ser utilizada como recurso na nova janela de dados SMEs a ser filtrada.
      Yb_n2_ant = Yb[2]; // Salva o dado da amostra filtrada Yb[2] para ser utilizada como recurso na nova janela de dados SMEs a ser filtrada.
      Yb_n3_ant = Yb[3]; // Salva o dado da amostra filtrada Yb[3] para ser utilizada como recurso na nova janela de dados SMEs a ser filtrada.
      Yc_ant = Yc[n]; // Salva o dado da amostra filtrada Yc[n] para ser utilizada como recurso na nova janela de dados SMEs a ser filtrada.
      Yc_n1_ant = Yc[n - 1]; // Salva o dado da amostra filtrada Yc[n-1] para ser utilizada como recurso na nova janela de dados SMEs a ser filtrada.
    }
    // Janela móvel desloca uma unidade para frente na janela de amostras SMEs sendo filtrados. Deslocamento dos recursos da janela atual sendo filtrada.
    Ya[4] = Ya[3];
    Ya[3] = Ya[2];
    Ya[2] = Ya[1];
    Ya[1] = Ya[0];
    Yb[4] = Yb[3];
    Yb[3] = Yb[2];
    Yb[2] = Yb[1];
    Yb[1] = Yb[0];
    if (n >= 4) { // O vetor Yc também é um vetor móvel e possui 5 (0~4) posições. A partir da última posição ele precisa ser resetado para começar a gravar os dados de novo.
      n++;
      Yc_n1_reset = Yc[n - 1]; // Esses dados são salvos porque são recursos que precisam ser utilizados pelo filtro [-,-,-,-,n-1]
      Yc_n2_reset = Yc[n - 2]; // Esses dados são salvos porque são recursos que precisam ser utilizados pelo filtro [-,-,-,n-2,n-1]
      n = 0; // Reseta o índice do vetor Yc.
      flag_reset = 1; // Ativa a rotina para utilizar esses recursos salvos no filtro.
    }
    else n++; // Se n não for 4 ou maior que 4, então acrescenta uma unidade no índice do vetor do filtro Yc.
    t++; // Acrescenta uma unidade no índice da janela de amostras de SMEs, i.e., x[n]
  }
  bn_ant = true;
  t = 0; // Reseta o índice da janela de amostras de SMEs, i.e., x[n]
}

void extracao() {
  // Extrai as features do sinal filtrado (Yc[n]) na etapa anterior.
  // RMS: ((sum(Yc[n]^2))/80)/CVM | CVM -> Contração Voluntária Máxima para normalização. i: 1 -> n
  x_carac[0][0] = sqrt((rms_sum * 0.0125)) * 2.782305249539014e+03; // 1/79 = 0.01265822785
  // DASDV: sqrt((sum(Yc[n+1] - Yc[n])^2)/79)/CVM | CVM -> Contração Voluntária Máxima para normalização. i: 1 -> n-1
  x_carac[0][1] = sqrt((dasdv_sum * 0.01265822785)) * 2.782305249539014e+03;
}

void classificar() {
  // A equação é dividia em duas partes:
  // x_m_Sinv = (x - m) * S^-1
  // y = x_m_Sinv * (x - m)'

  // Classe MR
  // x_m_Sinv = (x - m) * S^-1
  x_m_Sinv[0][0] = ((x_carac[0][0] - m[0][0]) * Sinv[0][0]) + ((x_carac[0][1] - m[0][1]) * Sinv[1][0]); // Se utilizar 3 ou mais características, deve-se adicionar para cada: + ((x_carac[0][n+1] - m[0][n+1]) * Sinv[n+1][0]);
  x_m_Sinv[0][1] = ((x_carac[0][0] - m[0][0]) * Sinv[0][1]) + ((x_carac[0][1] - m[0][1]) * Sinv[1][1]); // Se utilizar 3 ou mais características, deve-se adicionar para cada: + ((x_carac[0][2] - m[0][2]) * Sinv[2][1]);

  // y = x_m_Sinv * (x - m)'
  // Distância Mahalanobis para a classe MR
  y[0][0] = (x_m_Sinv[0][0] * (x_carac[0][0] - m[0][0])) + (x_m_Sinv[0][1] * (x_carac[0][1] - m[0][1])); // Se utilizar 3 ou mais características, deve-se adicionar para cada: + (x_m_Sinv[0][n+1] * (x[0][n+1] - m[0][n+1]));

  // Classe PP
  // x_m_Sinv = (x - m) * S^-1
  x_m_Sinv[1][0] = ((x_carac[0][0] - m[1][0]) * Sinv[0][0]) + ((x_carac[0][1] - m[1][1]) * Sinv[1][0]); // Se utilizar 3 ou mais características, deve-se adicionar para cada: + ((x_carac[0][n+1] - m[1][n+1]) * Sinv[n+1][0]);
  x_m_Sinv[1][1] = ((x_carac[0][0] - m[1][0]) * Sinv[0][1]) + ((x_carac[0][1] - m[1][1]) * Sinv[1][1]);// Se utilizar 3 ou mais características, deve-se adicionar para cada: + ((x_carac[0][2] - m[1][2]) * Sinv[2][1]);

  // y = x_m_Sinv * (x - m)'
  // Distância Mahalanobis para a classe PP
  y[0][1] = (x_m_Sinv[1][0] * (x_carac[0][0] - m[1][0])) + (x_m_Sinv[1][1] * (x_carac[0][1] - m[1][1])); // Se utilizar 3 ou mais características, deve-se adicionar para cada: + (x_m_Sinv[1][n+1] * (x[0][n+1] - m[1][n+1]));

  // Classe PC
  // x_m_Sinv = (x - m) * S^-1
  x_m_Sinv[2][0] = ((x_carac[0][0] - m[2][0]) * Sinv[0][0]) + ((x_carac[0][1] - m[2][1]) * Sinv[1][0]); // Se utilizar 3 ou mais características, deve-se adicionar para cada: + ((x_carac[0][n+1] - m[2][n+1]) * Sinv[n+1][0]);
  x_m_Sinv[2][1] = ((x_carac[0][0] - m[2][0]) * Sinv[0][1]) + ((x_carac[0][1] - m[2][1]) * Sinv[1][1]); // Se utilizar 3 ou mais características, deve-se adicionar para cada: + ((x_carac[0][2] - m[2][2]) * Sinv[2][1]);

  // y = x_m_Sinv * (x - m)'
  // Distância Mahalanobis para a classe PC
  y[0][2] = (x_m_Sinv[2][0] * (x_carac[0][0] - m[2][0])) + (x_m_Sinv[2][1] * (x_carac[0][1] - m[2][1])); //  Se utilizar 3 ou mais características, deve-se adicionar para cada: + (x_m_Sinv[2][n+1] * (x_carac[0][n+1] - m[2][n+1]));

  // Discriminação
  if (y[0][0] < y[0][1] & y[0][0] < y[0][2]) MV[u] = 1; // Verifica qual distância é menor, se MR tiver a menor distância até x, atribui ao índice u do vetor MV o valor 1.
  else if (y[0][1] < y[0][0] & y[0][1] < y[0][2]) MV[u] = 4; // Verifica qual distância é menor, se PP tiver a menor distância até x, atribui ao índice u do vetor MV o valor 4.
  else if (y[0][2] < y[0][0] & y[0][2] < y[0][1]) MV[u] = 13; // Verifica qual distância é menor, se PC tiver a menor distância até x, atribui ao índice u do vetor MV o valor 13.
  u++; // Acrescenta uma unidade ao índice de MV

  // Voto majoritário
  if (u > 2) { // Se o índice alcançar o valor 3, significa que já preencheu o vetor com 3 classes.
    mvsum = MV[0] + MV[1] + MV[2]; // Soma os valores
    if (mvsum == 3 || mvsum == 6 || mvsum == 15) pCharacteristic->setValue("MR"); // A soma representa uma das possibilidades de MR ter maior ocorrência, onde c representa 1, 4 ou 13:
    // [1,1,1] || [1,1,c] || [1,c,1] || [c,1,1]. Portanto, transmite a classe MR para SRA
    else if (mvsum == 9 || mvsum == 12 || mvsum == 21) pCharacteristic->setValue("PP"); // A soma representa uma das possibilidades de PP ter maior ocorrência:
    // [4,4,4] || [4,4,c] || [4,c,4] || [c,4,4]. Portanto, transmite a classe MR para SRA
    else if (mvsum == 27 || mvsum == 30 || mvsum == 39) pCharacteristic->setValue("PC"); // A soma representa uma das possibilidades de PC ter maior ocorrência:
    // [13,13,13] || [13,13,c] || [13,c,13] || [c,13,13]. Portanto, transmite a classe MR para SRA
    u = 0; // Reinicia o índice para novas 3 classes.
  }
}
